{"version":3,"file":"NewBranchDialog.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/NewBranchDialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classes } from 'typestyle';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { sleep } from '../utils';\nimport { Git, IGitExtension, ILogMessage } from '../tokens';\nimport {\n  actionsWrapperClass,\n  activeListItemClass,\n  branchDialogClass,\n  buttonClass,\n  cancelButtonClass,\n  closeButtonClass,\n  contentWrapperClass,\n  createButtonClass,\n  errorMessageClass,\n  filterClass,\n  filterClearClass,\n  filterInputClass,\n  filterWrapperClass,\n  listItemBoldTitleClass,\n  listItemClass,\n  listItemContentClass,\n  listItemDescClass,\n  listItemIconClass,\n  listItemTitleClass,\n  listWrapperClass,\n  nameInputClass,\n  titleClass,\n  titleWrapperClass\n} from '../style/NewBranchDialog';\nimport { SuspendModal } from './SuspendModal';\nimport { Alert } from './Alert';\n\nconst BRANCH_DESC = {\n  current:\n    'The current branch. Pick this if you want to build on work done in this branch.',\n  default:\n    'The default branch. Pick this if you want to start fresh from the default branch.'\n};\n\n/**\n * Interface describing component properties.\n */\nexport interface INewBranchDialogProps {\n  /**\n   * Git extension data model.\n   */\n  model: IGitExtension;\n\n  /**\n   * Boolean indicating whether to show the dialog.\n   */\n  open: boolean;\n\n  /**\n   * Boolean indicating whether to enable UI suspension.\n   */\n  suspend: boolean;\n\n  /**\n   * Callback to invoke upon closing the dialog.\n   */\n  onClose: () => void;\n}\n\n/**\n * Interface describing component state.\n */\nexport interface INewBranchDialogState {\n  /**\n   * Branch name.\n   */\n  name: string;\n\n  /**\n   * Base branch.\n   */\n  base: string;\n\n  /**\n   * Menu filter.\n   */\n  filter: string;\n\n  /**\n   * Current branch name.\n   */\n  current: string;\n\n  /**\n   * Current list of branches.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Error message.\n   */\n  error: string;\n\n  /**\n   * Boolean indicating whether UI interaction should be suspended (e.g., due to pending command).\n   */\n  suspend: boolean;\n\n  /**\n   * Boolean indicating whether to show an alert.\n   */\n  alert: boolean;\n\n  /**\n   * Log message.\n   */\n  log: ILogMessage;\n}\n\n/**\n * React component for rendering a dialog to create a new branch.\n */\nexport class NewBranchDialog extends React.Component<\n  INewBranchDialogProps,\n  INewBranchDialogState\n> {\n  /**\n   * Returns a React component for rendering a branch menu.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: INewBranchDialogProps) {\n    super(props);\n\n    const repo = this.props.model.pathRepository;\n\n    this.state = {\n      name: '',\n      base: repo ? this.props.model.currentBranch.name : '',\n      filter: '',\n      current: repo ? this.props.model.currentBranch.name : '',\n      branches: repo ? this.props.model.branches : [],\n      error: '',\n      suspend: false,\n      alert: false,\n      log: {\n        severity: 'info',\n        message: ''\n      }\n    };\n  }\n\n  /**\n   * Callback invoked immediately after mounting a component (i.e., inserting into a tree).\n   */\n  componentDidMount(): void {\n    this._addListeners();\n  }\n\n  /**\n   * Callback invoked when a component will no longer be mounted.\n   */\n  componentWillUnmount(): void {\n    this._removeListeners();\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <React.Fragment>\n        {this._renderDialog()}\n        {this._renderFeedback()}\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Renders a dialog for creating a new branch.\n   *\n   * @returns React element\n   */\n  private _renderDialog(): React.ReactElement {\n    return (\n      <Dialog\n        classes={{\n          paper: branchDialogClass\n        }}\n        open={this.props.open}\n        onClose={this._onClose}\n      >\n        <div className={titleWrapperClass}>\n          <p className={titleClass}>Create a Branch</p>\n          <button className={closeButtonClass}>\n            <ClearIcon\n              titleAccess=\"Close this dialog\"\n              fontSize=\"small\"\n              onClick={this._onClose}\n            />\n          </button>\n        </div>\n        <div className={contentWrapperClass}>\n          {this.state.error ? (\n            <p className={errorMessageClass}>{this.state.error}</p>\n          ) : null}\n          <p>Name</p>\n          <input\n            className={nameInputClass}\n            type=\"text\"\n            onChange={this._onNameChange}\n            value={this.state.name}\n            placeholder=\"\"\n            title=\"Enter a branch name\"\n          />\n          <p>Create branch based on...</p>\n          <div className={filterWrapperClass}>\n            <div className={filterClass}>\n              <input\n                className={filterInputClass}\n                type=\"text\"\n                onChange={this._onFilterChange}\n                value={this.state.filter}\n                placeholder=\"Filter\"\n                title=\"Filter branch menu\"\n              />\n              {this.state.filter ? (\n                <button className={filterClearClass}>\n                  <ClearIcon\n                    titleAccess=\"Clear the current filter\"\n                    fontSize=\"small\"\n                    onClick={this._resetFilter}\n                  />\n                </button>\n              ) : null}\n            </div>\n          </div>\n          <div className={listWrapperClass}>\n            <List disablePadding>{this._renderItems()}</List>\n          </div>\n        </div>\n        <DialogActions className={actionsWrapperClass}>\n          <input\n            className={classes(buttonClass, cancelButtonClass)}\n            type=\"button\"\n            title=\"Close this dialog without creating a new branch\"\n            value=\"Cancel\"\n            onClick={this._onClose}\n          />\n          <input\n            className={classes(buttonClass, createButtonClass)}\n            type=\"button\"\n            title=\"Create a new branch\"\n            value=\"Create Branch\"\n            onClick={this._onCreate}\n            disabled={this.state.name === '' || this.state.error !== ''}\n          />\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  /**\n   * Renders branch menu items.\n   *\n   * @returns array of React elements\n   */\n  private _renderItems(): React.ReactElement[] {\n    const current = this.props.model.currentBranch.name;\n    return this.state.branches\n      .slice()\n      .sort(comparator)\n      .map(this._renderItem, this);\n\n    /**\n     * Comparator function for sorting branches.\n     *\n     * @private\n     * @param a - first branch\n     * @param b - second branch\n     * @returns integer indicating sort order\n     */\n    function comparator(a: Git.IBranch, b: Git.IBranch): number {\n      if (a.name === current) {\n        return -1;\n      } else if (b.name === current) {\n        return 1;\n      }\n      if (a.name === 'master') {\n        return -1;\n      } else if (b.name === 'master') {\n        return 1;\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Renders a branch menu item.\n   *\n   * @param branch - branch\n   * @param idx - item index\n   * @returns React element\n   */\n  private _renderItem(\n    branch: Git.IBranch,\n    idx: number\n  ): React.ReactElement | null {\n    // Perform a \"simple\" filter... (TODO: consider implementing fuzzy filtering)\n    if (this.state.filter && !branch.name.includes(this.state.filter)) {\n      return null;\n    }\n    const isBase = branch.name === this.state.base;\n    const isCurr = branch.name === this.state.current;\n\n    let isBold;\n    let desc;\n    if (isCurr) {\n      isBold = true;\n      desc = BRANCH_DESC['current'];\n    }\n    return (\n      <ListItem\n        button\n        title={`Create a new branch based on: ${branch.name}`}\n        className={classes(listItemClass, isBase ? activeListItemClass : null)}\n        key={branch.name}\n        onClick={this._onBranchClickFactory(branch.name)}\n      >\n        <span\n          className={classes(\n            'jp-git-icon',\n            listItemIconClass,\n            'jp-Icon-16',\n            isBase && 'jp-git-selected'\n          )}\n        />\n        <div className={listItemContentClass}>\n          <p\n            className={classes(\n              listItemTitleClass,\n              isBold ? listItemBoldTitleClass : null\n            )}\n          >\n            {branch.name}\n          </p>\n          {desc ? <p className={listItemDescClass}>{desc}</p> : null}\n        </div>\n      </ListItem>\n    );\n  }\n\n  /**\n   * Renders a component to provide UI feedback.\n   *\n   * @returns React element\n   */\n  private _renderFeedback(): React.ReactElement {\n    return (\n      <React.Fragment>\n        <SuspendModal\n          open={this.props.suspend && this.state.suspend}\n          onClick={this._onFeedbackModalClick}\n        />\n        <Alert\n          open={this.state.alert}\n          message={this.state.log.message}\n          severity={this.state.log.severity}\n          onClose={this._onFeedbackAlertClose}\n        />\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Adds model listeners.\n   */\n  private _addListeners(): void {\n    // When the HEAD changes, decent probability that we've switched branches:\n    this.props.model.headChanged.connect(this._syncState, this);\n\n    // When the status changes, we may have checked out a new branch (e.g., via the command-line and not via the extension) or changed repositories:\n    this.props.model.statusChanged.connect(this._syncState, this);\n  }\n\n  /**\n   * Removes model listeners.\n   */\n  private _removeListeners(): void {\n    this.props.model.headChanged.disconnect(this._syncState, this);\n    this.props.model.statusChanged.disconnect(this._syncState, this);\n  }\n\n  /**\n   * Syncs the component state with the underlying model.\n   */\n  private _syncState(): void {\n    const repo = this.props.model.pathRepository;\n    this.setState({\n      base: repo ? this.state.base : '',\n      current: repo ? this.props.model.currentBranch.name : '',\n      branches: repo ? this.props.model.branches : []\n    });\n  }\n\n  /**\n   * Sets the suspension state.\n   *\n   * @param bool - boolean indicating whether to suspend UI interaction\n   */\n  private _suspend(bool: boolean): void {\n    if (this.props.suspend) {\n      this.setState({\n        suspend: bool\n      });\n    }\n  }\n\n  /**\n   * Sets the current component log message.\n   *\n   * @param msg - log message\n   */\n  private _log(msg: ILogMessage): void {\n    this.setState({\n      alert: true,\n      log: msg\n    });\n  }\n\n  /**\n   * Callback invoked upon closing the dialog.\n   *\n   * @param event - event object\n   */\n  private _onClose = (): void => {\n    this.props.onClose();\n    this.setState({\n      name: '',\n      filter: '',\n      error: ''\n    });\n  };\n\n  /**\n   * Callback invoked upon a change to the menu filter.\n   *\n   * @param event - event object\n   */\n  private _onFilterChange = (event: any): void => {\n    this.setState({\n      filter: event.target.value\n    });\n  };\n\n  /**\n   * Callback invoked to reset the menu filter.\n   */\n  private _resetFilter = (): void => {\n    this.setState({\n      filter: ''\n    });\n  };\n\n  /**\n   * Returns a callback which is invoked upon clicking a branch name.\n   *\n   * @param branch - branch name\n   * @returns callback\n   */\n  private _onBranchClickFactory(branch: string) {\n    const self = this;\n    return onClick;\n\n    /**\n     * Callback invoked upon clicking a branch name.\n     *\n     * @private\n     * @param event - event object\n     */\n    function onClick(): void {\n      self.setState({\n        base: branch\n      });\n    }\n  }\n\n  /**\n   * Callback invoked upon a change to the branch name input element.\n   *\n   * @param event - event object\n   */\n  private _onNameChange = (event: any): void => {\n    this.setState({\n      name: event.target.value,\n      error: ''\n    });\n  };\n\n  /**\n   * Callback invoked upon clicking a button to create a new branch.\n   *\n   * @param event - event object\n   */\n  private _onCreate = (): void => {\n    // Create the branch:\n    this._createBranch(this.state.name);\n  };\n\n  /**\n   * Creates a new branch.\n   *\n   * @param branch - branch name\n   * @returns promise which resolves upon attempting to create a new branch\n   */\n  private async _createBranch(branch: string): Promise<void> {\n    let result: Array<any>;\n\n    const opts = {\n      newBranch: true,\n      branchname: branch\n    };\n    this._log({\n      severity: 'info',\n      message: 'Creating branch...'\n    });\n    this._suspend(true);\n    try {\n      result = await Promise.all([\n        sleep(1000),\n        this.props.model.checkout(opts)\n      ]);\n    } catch (err) {\n      this._suspend(false);\n      this.setState({\n        error: err.message.replace(/^fatal:/, '')\n      });\n      this._log({\n        severity: 'error',\n        message: 'Failed to create branch.'\n      });\n      return;\n    }\n    this._suspend(false);\n    const res = result[1] as Git.ICheckoutResult;\n    if (res.code !== 0) {\n      this.setState({\n        error: res.message\n      });\n      this._log({\n        severity: 'error',\n        message: 'Failed to create branch.'\n      });\n      return;\n    }\n    this._log({\n      severity: 'success',\n      message: 'Branch created.'\n    });\n    // Close the branch dialog:\n    this.props.onClose();\n\n    // Reset the branch name and filter:\n    this.setState({\n      name: '',\n      filter: ''\n    });\n  }\n\n  /**\n   * Callback invoked upon clicking on the feedback modal.\n   *\n   * @param event - event object\n   */\n  private _onFeedbackModalClick = (): void => {\n    this._suspend(false);\n  };\n\n  /**\n   * Callback invoked upon closing a feedback alert.\n   *\n   * @param event - event object\n   */\n  private _onFeedbackAlertClose = (): void => {\n    this.setState({\n      alert: false\n    });\n  };\n}\n"]}