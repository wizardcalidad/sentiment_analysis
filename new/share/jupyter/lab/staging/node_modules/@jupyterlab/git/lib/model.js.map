{"version":3,"file":"model.js","sourceRoot":"./@jupyterlab/git/src/","sources":["model.ts"],"names":[],"mappings":"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","sourcesContent":["import { JupyterFrontEnd } from '@jupyterlab/application';\nimport { IChangedArgs, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { LinkedList } from '@lumino/collections';\nimport { CommandRegistry } from '@lumino/commands';\nimport { JSONObject } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { ISignal, Signal } from '@lumino/signaling';\nimport { httpGitRequest } from './git';\nimport { Git, IGitExtension } from './tokens';\nimport { decodeStage } from './utils';\n\n// Default refresh interval (in milliseconds) for polling the current Git status (NOTE: this value should be the same value as in the plugin settings schema):\nconst DEFAULT_REFRESH_INTERVAL = 3000; // ms\n\n/**\n * Class for creating a model for retrieving info from, and interacting with, a remote Git repository.\n */\nexport class GitExtension implements IGitExtension {\n  /**\n   * Returns an extension model.\n   *\n   * @param app - frontend application\n   * @param settings - plugin settings\n   * @returns extension model\n   */\n  constructor(\n    serverRoot: string,\n    app: JupyterFrontEnd = null,\n    docmanager: IDocumentManager = null,\n    settings?: ISettingRegistry.ISettings\n  ) {\n    const self = this;\n    this._serverRoot = serverRoot;\n    this._app = app;\n    this._docmanager = docmanager;\n    this._settings = settings || null;\n\n    let interval: number;\n    if (settings) {\n      interval = settings.composite.refreshInterval as number;\n      settings.changed.connect(onSettingsChange, this);\n    } else {\n      interval = DEFAULT_REFRESH_INTERVAL;\n    }\n    const poll = new Poll({\n      factory: () => self.refresh(),\n      frequency: {\n        interval: interval,\n        backoff: true,\n        max: 300 * 1000\n      },\n      standby: 'when-hidden'\n    });\n    this._poll = poll;\n\n    /**\n     * Callback invoked upon a change to plugin settings.\n     *\n     * @private\n     * @param settings - settings registry\n     */\n    function onSettingsChange(settings: ISettingRegistry.ISettings) {\n      const freq = poll.frequency;\n      poll.frequency = {\n        interval: settings.composite.refreshInterval as number,\n        backoff: freq.backoff,\n        max: freq.max\n      };\n    }\n  }\n\n  /**\n   * Branch list for the current repository.\n   */\n  get branches() {\n    return this._branches;\n  }\n\n  /**\n   * List of available Git commands.\n   */\n  get commands(): CommandRegistry | null {\n    return this._app ? this._app.commands : null;\n  }\n\n  /**\n   * The current repository branch.\n   */\n  get currentBranch() {\n    return this._currentBranch;\n  }\n\n  /**\n   * Boolean indicating whether the model has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Boolean indicating whether the model is ready.\n   */\n  get isReady(): boolean {\n    return this._pendingReadyPromise === 0;\n  }\n\n  /**\n   * Promise which fulfills when the model is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Git repository path.\n   *\n   * ## Notes\n   *\n   * -   This is the full path of the top-level folder.\n   * -   The return value is `null` if a repository path is not defined.\n   */\n  get pathRepository(): string | null {\n    return this._pathRepository;\n  }\n\n  set pathRepository(v: string | null) {\n    const change: IChangedArgs<string> = {\n      name: 'pathRepository',\n      newValue: null,\n      oldValue: this._pathRepository\n    };\n    if (v === null) {\n      this._pendingReadyPromise += 1;\n      this._readyPromise.then(() => {\n        this._pathRepository = null;\n        this._pendingReadyPromise -= 1;\n\n        if (change.newValue !== change.oldValue) {\n          this.refresh().then(() => this._repositoryChanged.emit(change));\n        }\n      });\n    } else {\n      const currentReady = this._readyPromise;\n      this._pendingReadyPromise += 1;\n      this._readyPromise = Promise.all([currentReady, this.showTopLevel(v)])\n        .then(r => {\n          const results = r[1];\n          if (results.code === 0) {\n            this._pathRepository = results.top_repo_path;\n            change.newValue = results.top_repo_path;\n          } else {\n            this._pathRepository = null;\n          }\n\n          if (change.newValue !== change.oldValue) {\n            this.refresh().then(() => this._repositoryChanged.emit(change));\n          }\n        })\n        .catch(reason => {\n          console.error(`Fail to find Git top level for path ${v}.\\n${reason}`);\n        });\n\n      void this._readyPromise.then(() => {\n        this._pendingReadyPromise -= 1;\n      });\n    }\n  }\n\n  /**\n   * The Jupyter front-end application shell.\n   */\n  get shell(): JupyterFrontEnd.IShell | null {\n    return this._app ? this._app.shell : null;\n  }\n\n  /**\n   * A list of modified files.\n   *\n   * ## Notes\n   *\n   * -   The file list corresponds to the list of files from `git status`.\n   */\n  get status(): Git.IStatusFile[] {\n    return this._status;\n  }\n\n  /**\n   * A signal emitted when the `HEAD` of the Git repository changes.\n   */\n  get headChanged(): ISignal<IGitExtension, void> {\n    return this._headChanged;\n  }\n\n  /**\n   * A signal emitted when the current marking of the Git repository changes.\n   */\n  get markChanged(): ISignal<IGitExtension, void> {\n    return this._markChanged;\n  }\n\n  /**\n   * A signal emitted when the current Git repository changes.\n   */\n  get repositoryChanged(): ISignal<IGitExtension, IChangedArgs<string | null>> {\n    return this._repositoryChanged;\n  }\n\n  /**\n   * A signal emitted when the current status of the Git repository changes.\n   */\n  get statusChanged(): ISignal<IGitExtension, Git.IStatusFile[]> {\n    return this._statusChanged;\n  }\n\n  /**\n   * A signal emitted whenever a model event occurs.\n   */\n  get logger(): ISignal<IGitExtension, string> {\n    return this._logger;\n  }\n\n  /**\n   * Add one or more files to the repository staging area.\n   *\n   * ## Notes\n   *\n   * -   If no filename is provided, all files are added.\n   *\n   * @param filename - files to add\n   * @returns promise which resolves upon adding files to the repository staging area\n   */\n  async add(...filename: string[]): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const tid = this._addTask('git:add:files');\n    try {\n      response = await httpGitRequest('/git/add', 'POST', {\n        add_all: !filename,\n        filename: filename || '',\n        top_repo_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.json();\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    this.refreshStatus();\n    return Promise.resolve(response);\n  }\n\n  /**\n   * Add all \"unstaged\" files to the repository staging area.\n   *\n   * @returns promise which resolves upon adding files to the repository staging area\n   */\n  async addAllUnstaged(): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const tid = this._addTask('git:add:files:all_unstaged');\n    try {\n      response = await httpGitRequest('/git/add_all_unstaged', 'POST', {\n        top_repo_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    this.refreshStatus();\n    return data;\n  }\n\n  /**\n   * Add all untracked files to the repository staging area.\n   *\n   * @returns promise which resolves upon adding files to the repository staging area\n   */\n  async addAllUntracked(): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const tid = this._addTask('git:add:files:all_untracked');\n    try {\n      response = await httpGitRequest('/git/add_all_untracked', 'POST', {\n        top_repo_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    this.refreshStatus();\n    return data;\n  }\n\n  /**\n   * Add a remote Git repository to the current repository.\n   *\n   * @param url - remote repository URL\n   * @param name - remote name\n   * @returns promise which resolves upon adding a remote\n   */\n  async addRemote(url: string, name?: string): Promise<void> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve();\n    }\n    const tid = this._addTask('git:add:remote');\n    try {\n      response = await httpGitRequest('/git/remote/add', 'POST', {\n        top_repo_path: path,\n        url,\n        name\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.text();\n      throw new ServerConnection.ResponseError(response, data);\n    }\n  }\n\n  /**\n   * Retrieve the repository commit log.\n   *\n   * ## Notes\n   *\n   * -  This API can be used to implicitly check if the current folder is a Git repository.\n   *\n   * @param count - number of commits to retrieve\n   * @returns promise which resolves upon retrieving the repository commit log\n   */\n  async allHistory(count = 25): Promise<Git.IAllHistory> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve({\n        code: -1,\n        message: 'Not in a Git repository.'\n      });\n    }\n    const tid = this._addTask('git:fetch:history');\n    try {\n      response = await httpGitRequest('/git/all_history', 'POST', {\n        current_path: path,\n        history_count: count\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.text();\n      throw new ServerConnection.ResponseError(response, data);\n    }\n    return response.json();\n  }\n\n  /**\n   * Checkout a branch.\n   *\n   * ## Notes\n   *\n   * -   If a branch name is provided, checkout the provided branch (with or without creating it)\n   * -   If a filename is provided, checkout the file, discarding all changes.\n   * -   If nothing is provided, checkout all files, discarding all changes.\n   *\n   * TODO: Refactor into separate endpoints for each kind of checkout request\n   *\n   * @param options - checkout options\n   * @returns promise which resolves upon performing a checkout\n   */\n  async checkout(options?: Git.ICheckoutOptions): Promise<Git.ICheckoutResult> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve({\n        code: -1,\n        message: 'Not in a Git repository.'\n      });\n    }\n    const body = {\n      checkout_branch: false,\n      new_check: false,\n      branchname: '',\n      startpoint: '',\n      checkout_all: true,\n      filename: '',\n      top_repo_path: path\n    };\n    if (options !== undefined) {\n      if (options.branchname) {\n        body.branchname = options.branchname;\n        body.checkout_branch = true;\n        body.new_check = options.newBranch === true;\n        if (options.newBranch) {\n          body.startpoint = options.startpoint || this._currentBranch.name;\n        }\n      } else if (options.filename) {\n        body.filename = options.filename;\n        body.checkout_all = false;\n      }\n    }\n    const tid = this._addTask('git:checkout');\n    try {\n      response = await httpGitRequest('/git/checkout', 'POST', body);\n\n      if (response.ok) {\n        if (body.checkout_branch) {\n          const files = (\n            await this.changedFiles(this._currentBranch.name, body.branchname)\n          )['files'];\n          if (files) {\n            files.forEach(file => this._revertFile(file));\n          }\n        } else {\n          this._revertFile(options.filename);\n        }\n      }\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n\n    if (body.checkout_branch) {\n      await this.refreshBranch();\n      this._headChanged.emit();\n    } else {\n      this.refreshStatus();\n    }\n    return data;\n  }\n\n  /**\n   * Clone a repository.\n   *\n   * @param path - local path into which the repository will be cloned\n   * @param url - Git repository URL\n   * @param auth - remote repository authentication information\n   * @returns promise which resolves upon cloning a repository\n   */\n  async clone(\n    path: string,\n    url: string,\n    auth?: Git.IAuth\n  ): Promise<Git.ICloneResult> {\n    let response;\n\n    const obj: Git.IGitClone = {\n      current_path: path,\n      clone_url: url,\n      auth\n    };\n    const tid = this._addTask('git:clone');\n    try {\n      response = await httpGitRequest('/git/clone', 'POST', obj);\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Commit all staged file changes.\n   *\n   * @param message - commit message\n   * @returns promise which resolves upon committing file changes\n   */\n  async commit(message: string): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const tid = this._addTask('git:commit:create');\n    try {\n      response = await httpGitRequest('/git/commit', 'POST', {\n        commit_msg: message,\n        top_repo_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.json();\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    this.refreshStatus();\n    this._headChanged.emit();\n    return response;\n  }\n\n  /**\n   * Get (or set) Git configuration options.\n   *\n   * @param options - configuration options to set\n   * @returns promise which resolves upon either getting or setting configuration options\n   */\n  async config(options?: JSONObject): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const tid = this._addTask('git:config:' + (options ? 'set' : 'get'));\n    try {\n      response = await httpGitRequest('/git/config', 'POST', {\n        path,\n        options\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.json();\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return response;\n  }\n\n  /**\n   * Revert changes made after a specified commit.\n   *\n   * @param message - commit message\n   * @param hash - commit identifier (hash)\n   * @returns promise which resolves upon reverting changes\n   */\n  async revertCommit(message: string, hash: string): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const tid = this._addTask('git:commit:revert');\n    const files = (await this.changedFiles(null, null, hash + '^!'))['files'];\n    try {\n      response = await httpGitRequest('/git/delete_commit', 'POST', {\n        commit_id: hash,\n        top_repo_path: path\n      });\n      if (response.ok && files) {\n        files.forEach(file => {\n          this._revertFile(file);\n        });\n      }\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.json();\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    await this.commit(message);\n    return response;\n  }\n\n  /**\n   * Fetch commit information.\n   *\n   * @param hash - commit hash\n   * @returns promise which resolves upon retrieving commit information\n   */\n  async detailedLog(hash: string): Promise<Git.ISingleCommitFilePathInfo> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve({\n        code: -1,\n        message: 'Not in a Git repository.'\n      });\n    }\n    const tid = this._addTask('git:fetch:commit_log');\n    try {\n      response = await httpGitRequest('/git/detailed_log', 'POST', {\n        selected_hash: hash,\n        current_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Initialize a new Git repository at a specified path.\n   *\n   * @param path - path at which initialize a Git repository\n   * @returns promise which resolves upon initializing a Git repository\n   */\n  async init(path: string): Promise<Response> {\n    let response;\n\n    const tid = this._addTask('git:init');\n    try {\n      response = await httpGitRequest('/git/init', 'POST', {\n        current_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.json();\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return response;\n  }\n\n  /**\n   * Retrieve commit logs.\n   *\n   * @param count - number of commits\n   * @returns promise which resolves upon retrieving commit logs\n   */\n  async log(count = 25): Promise<Git.ILogResult> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve({\n        code: -1,\n        message: 'Not in a Git repository.'\n      });\n    }\n    const tid = this._addTask('git:fetch:log');\n    try {\n      response = await httpGitRequest('/git/log', 'POST', {\n        current_path: path,\n        history_count: count\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Fetch changes from a remote repository.\n   *\n   * @param auth - remote authentication information\n   * @returns promise which resolves upon fetching changes\n   */\n  async pull(auth?: Git.IAuth): Promise<Git.IPushPullResult> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve({\n        code: -1,\n        message: 'Not in a Git repository.'\n      });\n    }\n    const obj: Git.IPushPull = {\n      current_path: path,\n      auth,\n      cancel_on_conflict: this._settings\n        ? (this._settings.composite['cancelPullMergeConflict'] as boolean)\n        : false\n    };\n    const tid = this._addTask('git:pull');\n    try {\n      response = await httpGitRequest('/git/pull', 'POST', obj);\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    this._headChanged.emit();\n    return data;\n  }\n\n  /**\n   * Push local changes to a remote repository.\n   *\n   * @param auth - remote authentication information\n   * @returns promise which resolves upon pushing changes\n   */\n  async push(auth?: Git.IAuth): Promise<Git.IPushPullResult> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve({\n        code: -1,\n        message: 'Not in a Git repository.'\n      });\n    }\n    const obj: Git.IPushPull = {\n      current_path: path,\n      auth\n    };\n    const tid = this._addTask('git:push');\n    try {\n      response = await httpGitRequest('/git/push', 'POST', obj);\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    this._headChanged.emit();\n    return data;\n  }\n\n  /**\n   * Refresh the repository.\n   *\n   * @returns promise which resolves upon refreshing the repository\n   */\n  async refresh(): Promise<void> {\n    const tid = this._addTask('git:refresh');\n    await this.refreshBranch();\n    await this.refreshStatus();\n    this._removeTask(tid);\n  }\n\n  /**\n   * Refresh the list of repository branches.\n   *\n   * @returns promise which resolves upon refreshing repository branches\n   */\n  async refreshBranch(): Promise<void> {\n    const tid = this._addTask('git:refresh:branches');\n    const response = await this._branch();\n    if (response.code === 0) {\n      this._branches = response.branches;\n      this._currentBranch = response.current_branch;\n      if (this._currentBranch) {\n        // Set up the marker obj for the current (valid) repo/branch combination\n        this._setMarker(this.pathRepository, this._currentBranch.name);\n      }\n    } else {\n      this._branches = [];\n      this._currentBranch = null;\n    }\n    this._removeTask(tid);\n  }\n\n  /**\n   * Refresh the repository status.\n   *\n   * @returns promise which resolves upon refreshing the repository status\n   */\n  async refreshStatus(): Promise<void> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      this._setStatus([]);\n      return Promise.resolve();\n    }\n    const tid = this._addTask('git:refresh:status');\n    try {\n      response = await httpGitRequest('/git/status', 'POST', {\n        current_path: path\n      });\n    } catch (err) {\n      // TODO we should notify the user\n      this._setStatus([]);\n      console.error(err);\n      return;\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      console.error(data.message);\n\n      // TODO we should notify the user\n      this._setStatus([]);\n      return;\n    }\n    this._setStatus(\n      (data as Git.IStatusResult).files.map(file => {\n        return { ...file, status: decodeStage(file.x, file.y) };\n      })\n    );\n  }\n\n  /**\n   * Move files from the \"staged\" to the \"unstaged\" area.\n   *\n   * ## Notes\n   *\n   * -  If no filename is provided, moves all files from the \"staged\" to the \"unstaged\" area.\n   *\n   * @param filename - file path to be reset\n   * @returns promise which resolves upon moving files\n   */\n  async reset(filename?: string): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const tid = this._addTask('git:reset:changes');\n    const reset_all = filename === undefined;\n    let files;\n    if (reset_all) {\n      files = (await this.changedFiles('INDEX', 'HEAD'))['files'];\n    }\n    try {\n      response = await httpGitRequest('/git/reset', 'POST', {\n        reset_all: filename === undefined,\n        filename: filename === undefined ? null : filename,\n        top_repo_path: path\n      });\n\n      if (response.ok) {\n        if (reset_all) {\n          if (files) {\n            files.forEach(file => {\n              this._revertFile(file);\n            });\n          }\n        } else {\n          this._revertFile(filename);\n        }\n      }\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.json();\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    this.refreshStatus();\n    return response;\n  }\n\n  /**\n   * Reset the repository to a specified commit.\n   *\n   * ## Notes\n   *\n   * -   If a commit hash is not provided, resets the repository to `HEAD`.\n   *\n   * @param hash - commit identifier (hash)\n   * @returns promises which resolves upon resetting the repository\n   */\n  async resetToCommit(hash = ''): Promise<Response> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(new Response(JSON.stringify(response)));\n    }\n    const files = (await this.changedFiles(null, null, hash))['files'];\n    const tid = this._addTask('git:reset:hard');\n    try {\n      response = await httpGitRequest('/git/reset_to_commit', 'POST', {\n        commit_id: hash,\n        top_repo_path: path\n      });\n      if (response.ok) {\n        if (files) {\n          files.forEach(file => {\n            this._revertFile(file);\n          });\n        }\n      }\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    if (!response.ok) {\n      const data = await response.json();\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    await this.refreshBranch();\n    this._headChanged.emit();\n    return response;\n  }\n\n  /**\n   * Retrieve the prefix path of a directory `path` with respect to the root repository directory.\n   *\n   * @param path - directory path\n   * @returns promise which resolves upon retrieving the prefix path\n   */\n  async showPrefix(path: string): Promise<Git.IShowPrefixResult> {\n    let response;\n\n    const tid = this._addTask('git:fetch:prefix_path');\n    try {\n      response = await httpGitRequest('/git/show_prefix', 'POST', {\n        current_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Retrieve the top level repository path.\n   *\n   * @param path - current path\n   * @returns promise which resolves upon retrieving the top level repository path\n   */\n  async showTopLevel(path: string): Promise<Git.IShowTopLevelResult> {\n    let response;\n\n    const tid = this._addTask('git:fetch:top_level_path');\n    try {\n      response = await httpGitRequest('/git/show_top_level', 'POST', {\n        current_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Retrieve the list of tags in the repository.\n   *\n   * @returns promise which resolves upon retrieving the tag list\n   */\n  async tags(): Promise<Git.ITagResult> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(response);\n    }\n\n    const tid = this._addTask('git:tag:list');\n    try {\n      response = await httpGitRequest('/git/tags', 'POST', {\n        current_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Checkout the specified tag version\n   *\n   * @param tag - selected tag version\n   * @returns promise which resolves upon checking out the tag version of the repository\n   */\n  async checkoutTag(tag: string): Promise<Git.ICheckoutResult> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      response = {\n        code: -1,\n        message: 'Not in a Git repository.'\n      };\n      return Promise.resolve(response);\n    }\n\n    const tid = this._addTask('git:tag:checkout');\n    try {\n      response = await httpGitRequest('/git/tag_checkout', 'POST', {\n        current_path: path,\n        tag_id: tag\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Add a file to the current marker object.\n   *\n   * @param fname - filename\n   * @param mark - mark to set\n   */\n  addMark(fname: string, mark: boolean) {\n    this._currentMarker.add(fname, mark);\n  }\n\n  /**\n   * Return the current mark associated with a specified filename.\n   *\n   * @param fname - filename\n   * @returns mark\n   */\n  getMark(fname: string): boolean {\n    return this._currentMarker.get(fname);\n  }\n\n  /**\n   * Toggle the mark for a file in the current marker object\n   *\n   * @param fname - filename\n   */\n  toggleMark(fname: string) {\n    this._currentMarker.toggle(fname);\n  }\n\n  /**\n   * Register a new diff provider for specified file types\n   *\n   * @param filetypes File type list\n   * @param callback Callback to use for the provided file types\n   */\n  registerDiffProvider(filetypes: string[], callback: Git.IDiffCallback): void {\n    filetypes.forEach(fileType => {\n      this._diffProviders[fileType] = callback;\n    });\n  }\n\n  /**\n   * Return the path of a file relative to the Jupyter server root.\n   *\n   * ## Notes\n   *\n   * -   If no path is provided, returns the Git repository top folder relative path.\n   * -   If no Git repository selected, returns `null`\n   *\n   * @param path - file path relative to the top folder of the Git repository\n   * @returns relative path\n   */\n  getRelativeFilePath(path?: string): string | null {\n    if (this.pathRepository === null || this._serverRoot === void 0) {\n      return null;\n    }\n    return PathExt.join(\n      PathExt.relative(this._serverRoot, this.pathRepository),\n      path || ''\n    );\n  }\n\n  /**\n   * Dispose of model resources.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._poll.dispose();\n    Signal.clearData(this);\n  }\n\n  /**\n   * Make request to ensure gitignore.\n   *\n   */\n  async ensureGitignore(): Promise<Response> {\n    await this.ready;\n    const repositoryPath = this.pathRepository;\n\n    if (repositoryPath === null) {\n      return Promise.resolve(\n        new Response(\n          JSON.stringify({\n            code: -1,\n            message: 'Not in a git repository.'\n          })\n        )\n      );\n    }\n\n    const response = await httpGitRequest('/git/ignore', 'POST', {\n      top_repo_path: repositoryPath\n    });\n\n    this.refreshStatus();\n    this._openGitignore();\n    return Promise.resolve(response);\n  }\n\n  /**\n   * Make request to ignore one file.\n   *\n   * @param filePath File to ignore\n   * @param useExtension Whether to ignore the file or its extension\n   */\n  async ignore(filePath: string, useExtension: boolean): Promise<Response> {\n    await this.ready;\n    const repositoryPath = this.pathRepository;\n\n    if (repositoryPath === null) {\n      return Promise.resolve(\n        new Response(\n          JSON.stringify({\n            code: -1,\n            message: 'Not in a git repository.'\n          })\n        )\n      );\n    }\n\n    const response = await httpGitRequest('/git/ignore', 'POST', {\n      top_repo_path: repositoryPath,\n      file_path: filePath,\n      use_extension: useExtension\n    });\n\n    this.refreshStatus();\n    this._openGitignore();\n    return Promise.resolve(response);\n  }\n\n  /**\n   * Get list of files changed between two commits or two branches\n   * @param base id of base commit or base branch for comparison\n   * @param remote id of remote commit or remote branch for comparison\n   * @param singleCommit id of a single commit\n   *\n   * @returns the names of the changed files\n   */\n  async changedFiles(\n    base?: string,\n    remote?: string,\n    singleCommit?: string\n  ): Promise<Git.IChangedFilesResult> {\n    try {\n      const response = await httpGitRequest('/git/changed_files', 'POST', {\n        current_path: this.pathRepository,\n        base: base,\n        remote: remote,\n        single_commit: singleCommit\n      });\n      if (!response.ok) {\n        return response.json().then((data: any) => {\n          throw new ServerConnection.ResponseError(response, data.message);\n        });\n      }\n      return response.json();\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    }\n  }\n\n  /**\n   * Make request for a list of all git branches in the repository\n   * Retrieve a list of repository branches.\n   *\n   * @returns promise which resolves upon fetching repository branches\n   */\n  protected async _branch(): Promise<Git.IBranchResult> {\n    let response;\n\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      return Promise.resolve({\n        code: -1,\n        message: 'Not in a Git repository.'\n      });\n    }\n    const tid = this._addTask('git:fetch:branches');\n    try {\n      response = await httpGitRequest('/git/branch', 'POST', {\n        current_path: path\n      });\n    } catch (err) {\n      throw new ServerConnection.NetworkError(err);\n    } finally {\n      this._removeTask(tid);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n  }\n\n  /**\n   * Set the repository status.\n   *\n   * @param v - repository status\n   */\n  protected _setStatus(v: Git.IStatusFile[]) {\n    this._status = v;\n    this._statusChanged.emit(this._status);\n  }\n\n  /**\n   * Set the marker object for a repository path and branch.\n   *\n   * @returns branch marker\n   */\n  private _setMarker(path: string, branch: string): BranchMarker {\n    this._currentMarker = this._markerCache.get(path, branch);\n    return this._currentMarker;\n  }\n\n  /**\n   * Adds a task to the list of pending model tasks.\n   *\n   * @param task - task name\n   * @returns task identifier\n   */\n  private _addTask(task: string): number {\n    // Generate a unique task identifier:\n    const id = this._generateTaskID();\n\n    // Add the task to our list of pending tasks:\n    this._taskList.addLast({\n      id: id,\n      task: task\n    });\n\n    // If this task is the only task, broadcast the task...\n    if (this._taskList.length === 1) {\n      this._logger.emit(task);\n    }\n    // Return the task identifier to allow consumers to remove the task once completed:\n    return id;\n  }\n\n  /**\n   * Removes a task from the list of pending model tasks.\n   *\n   * @param id - task identifier\n   */\n  private _removeTask(task: number): void {\n    let node = this._taskList.firstNode;\n\n    // Check the first node...\n    if (node && node.value.id === task) {\n      this._taskList.removeNode(node);\n    } else {\n      // Walk the task list looking for a task with the provided identifier...\n      while (node.next) {\n        node = node.next;\n        if (node.value && node.value.id === task) {\n          this._taskList.removeNode(node);\n          break;\n        }\n      }\n    }\n    // Check for pending tasks and broadcast the oldest pending task...\n    if (this._taskList.length === 0) {\n      this._logger.emit('git:idle');\n    } else {\n      this._logger.emit(this._taskList.first.task);\n    }\n  }\n\n  /**\n   * Generates a unique task identifier.\n   *\n   * @returns task identifier\n   */\n  private _generateTaskID(): number {\n    this._taskID += 1;\n    return this._taskID;\n  }\n\n  /**\n   * open new editor or show an existing editor of the\n   * .gitignore file. If the editor does not have unsaved changes\n   * then ensure the editor's content matches the file on disk\n   */\n  private _openGitignore() {\n    if (this._docmanager) {\n      const widget = this._docmanager.openOrReveal(\n        this.getRelativeFilePath('.gitignore')\n      );\n      if (widget && !widget.context.model.dirty) {\n        widget.context.revert();\n      }\n    }\n  }\n\n  /**\n   * if file is open in JupyterLab find the widget and ensure the JupyterLab\n   * version matches the version on disk. Do nothing if the file has unsaved changes\n   *\n   * @param path path to the file to be reverted\n   */\n  private _revertFile(path: string): void {\n    const widget = this._docmanager.findWidget(this.getRelativeFilePath(path));\n    if (widget && !widget.context.model.dirty) {\n      widget.context.revert();\n    }\n  }\n\n  private _status: Git.IStatusFile[] = [];\n  private _pathRepository: string | null = null;\n  private _branches: Git.IBranch[];\n  private _currentBranch: Git.IBranch;\n  private _serverRoot: string;\n  private _app: JupyterFrontEnd | null;\n  private _docmanager: IDocumentManager | null;\n  private _diffProviders: { [key: string]: Git.IDiffCallback } = {};\n  private _isDisposed = false;\n  private _markerCache: Markers = new Markers(() => this._markChanged.emit());\n  private _currentMarker: BranchMarker = null;\n  private _readyPromise: Promise<void> = Promise.resolve();\n  private _pendingReadyPromise = 0;\n  private _poll: Poll;\n  private _taskList: LinkedList<any> = new LinkedList();\n  private _taskID = 0;\n  private _settings: ISettingRegistry.ISettings | null;\n  private _headChanged = new Signal<IGitExtension, void>(this);\n  private _markChanged = new Signal<IGitExtension, void>(this);\n  private _repositoryChanged = new Signal<\n    IGitExtension,\n    IChangedArgs<string | null>\n  >(this);\n  private _statusChanged = new Signal<IGitExtension, Git.IStatusFile[]>(this);\n  private _logger = new Signal<IGitExtension, string>(this);\n}\n\nexport class BranchMarker implements Git.IBranchMarker {\n  constructor(private _refresh: () => void) {}\n\n  add(fname: string, mark = true) {\n    if (!(fname in this._marks)) {\n      this.set(fname, mark);\n    }\n  }\n\n  get(fname: string) {\n    return this._marks[fname];\n  }\n\n  set(fname: string, mark: boolean) {\n    this._marks[fname] = mark;\n    this._refresh();\n  }\n\n  toggle(fname: string) {\n    this.set(fname, !this._marks[fname]);\n  }\n\n  private _marks: { [key: string]: boolean } = {};\n}\n\nexport class Markers {\n  constructor(private _refresh: () => void) {}\n\n  get(path: string, branch: string): BranchMarker {\n    const key = Markers.markerKey(path, branch);\n    if (key in this._branchMarkers) {\n      return this._branchMarkers[key];\n    }\n\n    const marker = new BranchMarker(this._refresh);\n    this._branchMarkers[key] = marker;\n    return marker;\n  }\n\n  static markerKey(path: string, branch: string): string {\n    return [path, branch].join(':');\n  }\n\n  private _branchMarkers: { [key: string]: BranchMarker } = {};\n}\n"]}