{"version":3,"file":"TagList.js","sourceRoot":"./@jupyterlab/git/src/","sources":["widgets/TagList.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAEzC;;GAEG;AACH,MAAM,OAAO,YAAa,SAAQ,MAAM;IACtC;;OAEG;IACH,YAAY,KAAoB;QAC9B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE1C,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;IACK,cAAc;QACpB,IAAI,CAAC,MAAM;aACR,IAAI,EAAE;aACN,IAAI,CAAC,QAAQ,CAAC,EAAE;YACf,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,eAAe,CAAC,QAAwB;QACpD,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;SAC/B;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SACrC;IACH,CAAC;IAED;;;;OAIG;IACK,YAAY,CAClB,OAAO,GAAG,6EAA6E;QAEvF,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QAExB,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC5C,IAAI,CAAC,WAAW,GAAG,mCAAmC,CAAC;QACvD,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACpD,YAAY,CAAC,WAAW,GAAG,OAAO,CAAC;QACnC,YAAY,CAAC,YAAY,CACvB,OAAO,EACP,wDAAwD,CACzD,CAAC;QACF,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACK,cAAc,CAAC,QAAwB;QAC7C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QAExB,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC5C,IAAI,CAAC,WAAW,GAAG,+BAA+B,CAAC;QACnD,qDAAqD;QACrD,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACjB,IAAI,GAAG,EAAE;gBACP,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;gBACnB,MAAM,CAAC,WAAW,GAAG,GAAG,CAAC;gBACzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;aAChC;QACH,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACK,WAAW;QACjB,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC1B,CAAC;CAMF","sourcesContent":["import { Spinner } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nimport { Git, IGitExtension } from '../tokens';\n/**\n * The UI for the content shown within the Git push/pull modal.\n */\nexport class GitTagDialog extends Widget {\n  /**\n   * Instantiates the dialog and makes the relevant service API call.\n   */\n  constructor(model: IGitExtension) {\n    super();\n    this._model = model;\n\n    this._body = this._createBody();\n    this.node.appendChild(this._body);\n\n    this._spinner = new Spinner();\n    this.node.appendChild(this._spinner.node);\n\n    this._executeGitApi();\n  }\n\n  /**\n   * Call the Git REST API\n   */\n  private _executeGitApi() {\n    this._model\n      .tags()\n      .then(response => {\n        this._handleResponse(response);\n      })\n      .catch(error => this._handleError(error.message));\n  }\n\n  /**\n   * Handles the response from the server by removing the _spinner and showing the appropriate\n   * success or error message.\n   *\n   * @param response the response from the server API call\n   */\n  private async _handleResponse(response: Git.ITagResult) {\n    if (response.code === 0) {\n      this._handleSuccess(response);\n    } else {\n      this._handleError(response.message);\n    }\n  }\n\n  /**\n   * Handle failed Git tag REST API call\n   *\n   * @param message Error message\n   */\n  private _handleError(\n    message = 'Unexpected failure. Please check your Jupyter server logs for more details.'\n  ): void {\n    this.node.removeChild(this._spinner.node);\n    this._spinner.dispose();\n\n    const label = document.createElement('label');\n    const text = document.createElement('span');\n    text.textContent = 'Tag list fetch failed with error:';\n    const errorMessage = document.createElement('span');\n    errorMessage.textContent = message;\n    errorMessage.setAttribute(\n      'style',\n      'background-color:var(--jp-rendermime-error-background)'\n    );\n    label.appendChild(text);\n    label.appendChild(document.createElement('p'));\n    label.appendChild(errorMessage);\n    this._body.appendChild(label);\n  }\n\n  /**\n   * Handle successful Git tag REST API call\n   *\n   * @param response Git REST API response\n   */\n  private _handleSuccess(response: Git.ITagResult): void {\n    this.node.removeChild(this._spinner.node);\n    this._spinner.dispose();\n\n    const label = document.createElement('label');\n    const text = document.createElement('span');\n    text.textContent = 'Select the tag to checkout : ';\n    // Reverse the tag list to get the more recent on top\n    const tags = response.tags.reverse();\n    this._list = document.createElement('select');\n    tags.forEach(tag => {\n      if (tag) {\n        const option = document.createElement('option');\n        option.value = tag;\n        option.textContent = tag;\n        this._list.appendChild(option);\n      }\n    });\n    label.appendChild(text);\n    this._body.appendChild(label);\n    this._body.appendChild(this._list);\n  }\n\n  /**\n   * Create the dialog body node\n   */\n  private _createBody(): HTMLElement {\n    const node = document.createElement('div');\n    node.className = 'jp-RedirectForm';\n    return node;\n  }\n\n  /**\n   * Returns the input value.\n   */\n  getValue(): string {\n    return this._list.value;\n  }\n\n  private _body: HTMLElement;\n  private _list: HTMLSelectElement;\n  private _model: IGitExtension;\n  private _spinner: Spinner;\n}\n"]}