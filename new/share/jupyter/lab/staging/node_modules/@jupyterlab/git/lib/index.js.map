{"version":3,"file":"index.js","sourceRoot":"./@jupyterlab/git/src/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ILayoutRestorer,\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { Dialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { IChangedArgs } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { FileBrowserModel, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { addCommands, createGitMenu } from './commandsAndMenu';\nimport { GitExtension } from './model';\nimport { getServerSettings } from './server';\nimport { gitIcon } from './style/icons';\nimport { Git, IGitExtension } from './tokens';\nimport { addCloneButton } from './widgets/gitClone';\nimport { GitWidget } from './widgets/GitWidget';\nimport { addStatusBarWidget } from './widgets/StatusWidget';\n\nexport { Git, IGitExtension } from './tokens';\n\n/**\n * The default running sessions extension.\n */\nconst plugin: JupyterFrontEndPlugin<IGitExtension> = {\n  id: '@jupyterlab/git:plugin',\n  requires: [\n    IMainMenu,\n    ILayoutRestorer,\n    IFileBrowserFactory,\n    IRenderMimeRegistry,\n    ISettingRegistry,\n    IDocumentManager,\n    IStatusBar\n  ],\n  provides: IGitExtension,\n  activate,\n  autoStart: true\n};\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n\n/**\n * Activate the running plugin.\n */\nasync function activate(\n  app: JupyterFrontEnd,\n  mainMenu: IMainMenu,\n  restorer: ILayoutRestorer,\n  factory: IFileBrowserFactory,\n  renderMime: IRenderMimeRegistry,\n  settingRegistry: ISettingRegistry,\n  docmanager: IDocumentManager,\n  statusBar: IStatusBar\n): Promise<IGitExtension> {\n  let gitExtension: GitExtension | null = null;\n  let settings: ISettingRegistry.ISettings;\n  let serverSettings: Git.IServerSettings;\n  // Get a reference to the default file browser extension\n  const filebrowser = factory.defaultBrowser;\n\n  // Attempt to load application settings\n  try {\n    settings = await settingRegistry.load(plugin.id);\n  } catch (error) {\n    console.error(`Failed to load settings for the Git Extension.\\n${error}`);\n  }\n  try {\n    serverSettings = await getServerSettings();\n    const { frontendVersion, gitVersion, serverVersion } = serverSettings;\n\n    // Version validation\n    if (!gitVersion) {\n      throw new Error(\n        'git command not found - please ensure you have Git > 2 installed'\n      );\n    } else {\n      const gitVersion_ = gitVersion.split('.');\n      if (Number.parseInt(gitVersion_[0]) < 2) {\n        throw new Error(`git command version must be > 2; got ${gitVersion}.`);\n      }\n    }\n\n    if (frontendVersion && frontendVersion !== serverVersion) {\n      throw new Error(\n        'The versions of the JupyterLab Git server frontend and backend do not match. ' +\n          `The @jupyterlab/git frontend extension has version: ${frontendVersion} ` +\n          `while the python package has version ${serverVersion}. ` +\n          'Please install identical version of jupyterlab-git Python package and the @jupyterlab/git extension. Try running: pip install --upgrade jupyterlab-git'\n      );\n    }\n  } catch (error) {\n    // If we fall here, nothing will be loaded in the frontend.\n    console.error(\n      'Failed to load the jupyterlab-git server extension settings',\n      error\n    );\n    showErrorMessage(\n      'Failed to load the jupyterlab-git server extension',\n      error.message,\n      [Dialog.warnButton({ label: 'DISMISS' })]\n    );\n    return null;\n  }\n  // Create the Git model\n  gitExtension = new GitExtension(\n    serverSettings.serverRoot,\n    app,\n    docmanager,\n    settings\n  );\n\n  // Whenever we restore the application, sync the Git extension path\n  Promise.all([app.restored, filebrowser.model.restored]).then(() => {\n    gitExtension.pathRepository = filebrowser.model.path;\n  });\n\n  // Whenever the file browser path changes, sync the Git extension path\n  filebrowser.model.pathChanged.connect(\n    (model: FileBrowserModel, change: IChangedArgs<string>) => {\n      gitExtension.pathRepository = change.newValue;\n    }\n  );\n  // Whenever a user adds/renames/saves/deletes/modifies a file within the lab environment, refresh the Git status\n  filebrowser.model.fileChanged.connect(() => gitExtension.refreshStatus());\n\n  // Provided we were able to load application settings, create the extension widgets\n  if (settings) {\n    // Add JupyterLab commands\n    addCommands(app, gitExtension, factory.defaultBrowser, settings);\n\n    // Create the Git widget sidebar\n    const gitPlugin = new GitWidget(\n      gitExtension,\n      settings,\n      renderMime,\n      factory.defaultBrowser.model\n    );\n    gitPlugin.id = 'jp-git-sessions';\n    gitPlugin.title.icon = gitIcon;\n    gitPlugin.title.caption = 'Git';\n\n    // Let the application restorer track the running panel for restoration of\n    // application state (e.g. setting the running panel as the current side bar\n    // widget).\n    restorer.add(gitPlugin, 'git-sessions');\n\n    // Rank has been chosen somewhat arbitrarily to give priority to the running\n    // sessions widget in the sidebar.\n    app.shell.add(gitPlugin, 'left', { rank: 200 });\n\n    // Add a menu for the plugin\n    mainMenu.addMenu(createGitMenu(app.commands), { rank: 60 });\n\n    // Add a clone button to the file browser extension toolbar\n    addCloneButton(gitExtension, factory.defaultBrowser);\n\n    // Add the status bar widget\n    addStatusBarWidget(statusBar, gitExtension, settings);\n  }\n\n  return gitExtension;\n}\n"]}