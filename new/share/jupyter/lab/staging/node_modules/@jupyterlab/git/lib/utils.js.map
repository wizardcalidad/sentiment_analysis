{"version":3,"file":"utils.js","sourceRoot":"./@jupyterlab/git/src/","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { GitExtension } from './model';\nimport {\n  folderFileIconStyle,\n  genericFileIconStyle,\n  imageFileIconStyle,\n  jsonFileIconStyle,\n  kernelFileIconStyle,\n  markdownFileIconStyle,\n  notebookFileIconStyle,\n  pythonFileIconStyle,\n  spreadsheetFileIconStyle,\n  yamlFileIconStyle\n} from './style/FileListStyle';\nimport { Git } from './tokens';\n\n/** Get the filename from a path */\nexport function extractFilename(path: string): string {\n  if (path[path.length - 1] === '/') {\n    return path;\n  } else {\n    return PathExt.basename(path);\n  }\n}\n\nexport function decodeStage(x: string, y: string): Git.Status {\n  // If file is untracked\n  if (x === '?' && y === '?') {\n    return 'untracked';\n  } else {\n    // If file is staged\n    if (x !== ' ') {\n      return y !== ' ' ? 'partially-staged' : 'staged';\n    }\n    // If file is unstaged but tracked\n    if (y !== ' ') {\n      return 'unstaged';\n    }\n  }\n\n  return null;\n}\n\n/** Open a file in the git listing */\nexport async function openListedFile(\n  file: Git.IStatusFileResult,\n  model: GitExtension\n) {\n  const { x, y, to } = file;\n  if (x === 'D' || y === 'D') {\n    await showDialog({\n      title: 'Open File Failed',\n      body: 'This file has been deleted!',\n      buttons: [Dialog.warnButton({ label: 'OK' })]\n    });\n    return;\n  }\n  try {\n    if (to[to.length - 1] !== '/') {\n      model.commands.execute('docmanager:open', {\n        path: model.getRelativeFilePath(to)\n      });\n    } else {\n      console.log('Cannot open a folder here');\n    }\n  } catch (err) {\n    console.error(`Fail to open ${to}.`);\n  }\n}\n\n/**\n * Get the extension of a given file\n *\n * @param path File path for which the icon should be found\n */\nexport function getFileIconClassName(path: string): string {\n  if (path[path.length - 1] === '/') {\n    return folderFileIconStyle;\n  }\n  const fileExtension = PathExt.extname(path).toLocaleLowerCase();\n  switch (fileExtension) {\n    case '.md':\n      return markdownFileIconStyle;\n    case '.py':\n      return pythonFileIconStyle;\n    case '.ipynb':\n      return notebookFileIconStyle;\n    case '.json':\n      return jsonFileIconStyle;\n    case '.csv':\n    case '.xls':\n    case '.xlsx':\n      return spreadsheetFileIconStyle;\n    case '.r':\n      return kernelFileIconStyle;\n    case '.yml':\n    case '.yaml':\n      return yamlFileIconStyle;\n    case '.svg':\n    case '.tiff':\n    case '.jpeg':\n    case '.jpg':\n    case '.gif':\n    case '.png':\n    case '.raw':\n      return imageFileIconStyle;\n    default:\n      return genericFileIconStyle;\n  }\n}\n\n/**\n * Returns a promise which resolves after a specified duration.\n *\n * @param ms - duration (in milliseconds)\n * @returns a promise\n */\nexport function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"]}