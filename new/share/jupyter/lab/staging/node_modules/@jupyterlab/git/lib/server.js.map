{"version":3,"file":"server.js","sourceRoot":"./@jupyterlab/git/src/","sources":["server.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD,OAAO,EAAE,cAAc,EAAE,MAAM,OAAO,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,CAAC,KAAK,UAAU,iBAAiB;IACrC,IAAI;QACF,MAAM,QAAQ,GAAG,eAAe,GAAG,MAAM,CAAC,mBAAmB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC3E,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;YAC3B,MAAM,OAAO,GACX,4EAA4E;gBAC5E,oFAAoF;gBACpF,uFAAuF,CAAC;YAC1F,MAAM,IAAI,gBAAgB,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC7D;QACD,IAAI,OAAO,GAAiB,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC/B;QACD,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC;YAC3C,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,OAAO,CAAC,CAAC;YACtE,MAAM,IAAI,gBAAgB,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC7D;QACD,OAAO,OAA8B,CAAC;KACvC;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,gBAAgB,CAAC,aAAa,EAAE;YACnD,MAAM,KAAK,CAAC;SACb;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;KACF;AACH,CAAC","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { Git } from './tokens';\nimport { httpGitRequest } from './git';\nimport { version } from './version';\n\nexport async function getServerSettings(): Promise<Git.IServerSettings> {\n  try {\n    const endpoint = '/git/settings' + URLExt.objectToQueryString({ version });\n    const response = await httpGitRequest(endpoint, 'GET', null);\n    if (response.status === 404) {\n      const message =\n        'Git server extension is unavailable. Please ensure you have installed the ' +\n        'JupyterLab Git server extension by running: pip install --upgrade jupyterlab-git. ' +\n        'To confirm that the server extension is installed, run: jupyter serverextension list.';\n      throw new ServerConnection.ResponseError(response, message);\n    }\n    let content: string | any = await response.text();\n    if (content.length > 0) {\n      content = JSON.parse(content);\n    }\n    if (!response.ok) {\n      const message = content.message || content;\n      console.error('Failed to get the server extension settings', message);\n      throw new ServerConnection.ResponseError(response, message);\n    }\n    return content as Git.IServerSettings;\n  } catch (error) {\n    if (error instanceof ServerConnection.ResponseError) {\n      throw error;\n    } else {\n      throw new Error(error);\n    }\n  }\n}\n"]}