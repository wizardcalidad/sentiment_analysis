{"version":3,"file":"SuspendModal.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/SuspendModal.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,MAAM,yBAAyB,CAAC;AAC5C,OAAO,gBAAgB,MAAM,oCAAoC,CAAC;AAClE,OAAO,EAAE,uBAAuB,EAAE,MAAM,uBAAuB,CAAC;AAiBhE;;GAEG;AACH,MAAM,OAAO,YAAa,SAAQ,KAAK,CAAC,SAA6B;IACnE;;;;;OAKG;IACH,YAAY,KAAyB;QACnC,KAAK,CAAC,KAAK,CAAC,CAAC;QAkBf;;;;WAIG;QACK,aAAQ,GAAG,CAAC,KAAU,EAAQ,EAAE;YACtC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC;IAxBF,CAAC;IAED;;;;OAIG;IACH,MAAM;QACJ,OAAO,CACL,oBAAC,KAAK,IAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ;YAClD,6BAAK,SAAS,EAAE,uBAAuB;gBACrC,oBAAC,gBAAgB,IAAC,KAAK,EAAC,SAAS,GAAG,CAChC,CACA,CACT,CAAC;IACJ,CAAC;CAUF","sourcesContent":["import * as React from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { fullscreenProgressClass } from '../style/SuspendModal';\n\n/**\n * Interface describing component properties.\n */\nexport interface ISuspendModalProps {\n  /**\n   * Boolean indicating whether to display a modal blocking UI interaction.\n   */\n  open: boolean;\n\n  /**\n   * Callback invoked upon clicking on a modal.\n   */\n  onClick?: (event?: any) => void;\n}\n\n/**\n * React component for rendering a modal blocking UI interaction.\n */\nexport class SuspendModal extends React.Component<ISuspendModalProps> {\n  /**\n   * Returns a React component for rendering a modal.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: ISuspendModalProps) {\n    super(props);\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <Modal open={this.props.open} onClick={this._onClick}>\n        <div className={fullscreenProgressClass}>\n          <CircularProgress color=\"inherit\" />\n        </div>\n      </Modal>\n    );\n  }\n\n  /**\n   * Callback invoked upon clicking on a feedback modal.\n   *\n   * @param event - event object\n   */\n  private _onClick = (event: any): void => {\n    this.props.onClick && this.props.onClick(event);\n  };\n}\n"]}