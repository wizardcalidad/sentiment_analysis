{"version":3,"file":"BranchMenu.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/BranchMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Dialog, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport * as React from 'react';\nimport { classes } from 'typestyle';\nimport {\n  activeListItemClass,\n  filterClass,\n  filterClearClass,\n  filterInputClass,\n  filterWrapperClass,\n  listItemClass,\n  listItemIconClass,\n  listWrapperClass,\n  newBranchButtonClass,\n  wrapperClass\n} from '../style/BranchMenu';\nimport { Git, IGitExtension, ILogMessage } from '../tokens';\nimport { sleep } from '../utils';\nimport { Alert } from './Alert';\nimport { NewBranchDialog } from './NewBranchDialog';\nimport { SuspendModal } from './SuspendModal';\n\nconst CHANGES_ERR_MSG =\n  'The current branch contains files with uncommitted changes. Please commit or discard these changes before switching to or creating another branch.';\n\n/**\n * Callback invoked upon encountering an error when switching branches.\n *\n * @private\n * @param err - error\n */\nfunction onBranchError(err: any): void {\n  if (err.message.includes('following files would be overwritten')) {\n    showDialog({\n      title: 'Unable to switch branch',\n      body: (\n        <React.Fragment>\n          <p>\n            Your changes to the following files would be overwritten by\n            switching:\n          </p>\n          <List>\n            {err.message\n              .split('\\n')\n              .slice(1, -3)\n              .map(renderFileName)}\n          </List>\n          <span>\n            Please commit, stash, or discard your changes before you switch\n            branches.\n          </span>\n        </React.Fragment>\n      ),\n      buttons: [Dialog.okButton({ label: 'Dismiss' })]\n    });\n  } else {\n    showErrorMessage('Error switching branch', err.message);\n  }\n}\n\n/**\n * Renders a file name.\n *\n * @private\n * @param filename - file name\n * @returns React element\n */\nfunction renderFileName(filename: string): React.ReactElement {\n  return <ListItem key={filename}>{filename}</ListItem>;\n}\n\n/**\n * Interface describing component properties.\n */\nexport interface IBranchMenuProps {\n  /**\n   * Git extension data model.\n   */\n  model: IGitExtension;\n\n  /**\n   * Boolean indicating whether branching is disabled.\n   */\n  branching: boolean;\n\n  /**\n   * Boolean indicating whether to enable UI suspension.\n   */\n  suspend: boolean;\n}\n\n/**\n * Interface describing component state.\n */\nexport interface IBranchMenuState {\n  /**\n   * Menu filter.\n   */\n  filter: string;\n\n  /**\n   * Boolean indicating whether to show a dialog to create a new branch.\n   */\n  branchDialog: boolean;\n\n  /**\n   * Current branch name.\n   */\n  current: string;\n\n  /**\n   * Current list of branches.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Boolean indicating whether UI interaction should be suspended (e.g., due to pending command).\n   */\n  suspend: boolean;\n\n  /**\n   * Boolean indicating whether to show an alert.\n   */\n  alert: boolean;\n\n  /**\n   * Log message.\n   */\n  log: ILogMessage;\n}\n\n/**\n * React component for rendering a branch menu.\n */\nexport class BranchMenu extends React.Component<\n  IBranchMenuProps,\n  IBranchMenuState\n> {\n  /**\n   * Returns a React component for rendering a branch menu.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: IBranchMenuProps) {\n    super(props);\n\n    const repo = this.props.model.pathRepository;\n\n    this.state = {\n      filter: '',\n      branchDialog: false,\n      current: repo ? this.props.model.currentBranch.name : '',\n      branches: repo ? this.props.model.branches : [],\n      suspend: false,\n      alert: false,\n      log: {\n        severity: 'info',\n        message: ''\n      }\n    };\n  }\n\n  /**\n   * Callback invoked immediately after mounting a component (i.e., inserting into a tree).\n   */\n  componentDidMount(): void {\n    this._addListeners();\n  }\n\n  /**\n   * Callback invoked when a component will no longer be mounted.\n   */\n  componentWillUnmount(): void {\n    this._removeListeners();\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <div className={wrapperClass}>\n        {this._renderFilter()}\n        {this._renderBranchList()}\n        {this._renderNewBranchDialog()}\n        {this._renderFeedback()}\n      </div>\n    );\n  }\n\n  /**\n   * Renders a branch input filter.\n   *\n   * @returns React element\n   */\n  private _renderFilter(): React.ReactElement {\n    return (\n      <div className={filterWrapperClass}>\n        <div className={filterClass}>\n          <input\n            className={filterInputClass}\n            type=\"text\"\n            onChange={this._onFilterChange}\n            value={this.state.filter}\n            placeholder=\"Filter\"\n            title=\"Filter branch menu\"\n          />\n          {this.state.filter ? (\n            <button className={filterClearClass}>\n              <ClearIcon\n                titleAccess=\"Clear the current filter\"\n                fontSize=\"small\"\n                onClick={this._resetFilter}\n              />\n            </button>\n          ) : null}\n        </div>\n        <input\n          className={newBranchButtonClass}\n          type=\"button\"\n          title=\"Create a new branch\"\n          value=\"New Branch\"\n          onClick={this._onNewBranchClick}\n        />\n      </div>\n    );\n  }\n\n  /**\n   * Renders a\n   *\n   * @returns React element\n   */\n  private _renderBranchList(): React.ReactElement {\n    return (\n      <div className={listWrapperClass}>\n        <List disablePadding>{this._renderItems()}</List>\n      </div>\n    );\n  }\n\n  /**\n   * Renders menu items.\n   *\n   * @returns array of React elements\n   */\n  private _renderItems(): React.ReactElement[] {\n    return this.state.branches.map(this._renderItem, this);\n  }\n\n  /**\n   * Renders a menu item.\n   *\n   * @param branch - branch\n   * @param idx - item index\n   * @returns React element\n   */\n  private _renderItem(\n    branch: Git.IBranch,\n    idx: number\n  ): React.ReactElement | null {\n    // Perform a \"simple\" filter... (TODO: consider implementing fuzzy filtering)\n    if (this.state.filter && !branch.name.includes(this.state.filter)) {\n      return null;\n    }\n    const isActive = branch.name === this.state.current;\n    return (\n      <ListItem\n        button\n        title={`Switch to branch: ${branch.name}`}\n        className={classes(\n          listItemClass,\n          isActive ? activeListItemClass : null\n        )}\n        key={branch.name}\n        onClick={this._onBranchClickFactory(branch.name)}\n      >\n        <span\n          className={classes(\n            'jp-git-icon',\n            listItemIconClass,\n            isActive && 'jp-git-selected'\n          )}\n        />\n        {branch.name}\n      </ListItem>\n    );\n  }\n\n  /**\n   * Renders a dialog for creating a new branch.\n   *\n   * @returns React element\n   */\n  private _renderNewBranchDialog(): React.ReactElement {\n    return (\n      <NewBranchDialog\n        open={this.state.branchDialog}\n        suspend={this.props.suspend}\n        model={this.props.model}\n        onClose={this._onNewBranchDialogClose}\n      />\n    );\n  }\n\n  /**\n   * Renders a component to provide UI feedback.\n   *\n   * @returns React element\n   */\n  private _renderFeedback(): React.ReactElement {\n    return (\n      <React.Fragment>\n        <SuspendModal\n          open={this.props.suspend && this.state.suspend}\n          onClick={this._onFeedbackModalClick}\n        />\n        <Alert\n          open={this.state.alert}\n          message={this.state.log.message}\n          severity={this.state.log.severity}\n          onClose={this._onFeedbackAlertClose}\n        />\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Adds model listeners.\n   */\n  private _addListeners(): void {\n    // When the HEAD changes, decent probability that we've switched branches:\n    this.props.model.headChanged.connect(this._syncState, this);\n\n    // When the status changes, we may have checked out a new branch (e.g., via the command-line and not via the extension) or changed repositories:\n    this.props.model.statusChanged.connect(this._syncState, this);\n  }\n\n  /**\n   * Removes model listeners.\n   */\n  private _removeListeners(): void {\n    this.props.model.headChanged.disconnect(this._syncState, this);\n    this.props.model.statusChanged.disconnect(this._syncState, this);\n  }\n\n  /**\n   * Syncs the component state with the underlying model.\n   */\n  private _syncState(): void {\n    const repo = this.props.model.pathRepository;\n    this.setState({\n      current: repo ? this.props.model.currentBranch.name : '',\n      branches: repo ? this.props.model.branches : []\n    });\n  }\n\n  /**\n   * Sets the suspension state.\n   *\n   * @param bool - boolean indicating whether to suspend UI interaction\n   */\n  private _suspend(bool: boolean): void {\n    if (this.props.suspend) {\n      this.setState({\n        suspend: bool\n      });\n    }\n  }\n\n  /**\n   * Sets the current component log message.\n   *\n   * @param msg - log message\n   */\n  private _log(msg: ILogMessage): void {\n    this.setState({\n      alert: true,\n      log: msg\n    });\n  }\n\n  /**\n   * Callback invoked upon a change to the menu filter.\n   *\n   * @param event - event object\n   */\n  private _onFilterChange = (event: any): void => {\n    this.setState({\n      filter: event.target.value\n    });\n  };\n\n  /**\n   * Callback invoked to reset the menu filter.\n   */\n  private _resetFilter = (): void => {\n    this.setState({\n      filter: ''\n    });\n  };\n\n  /**\n   * Callback invoked upon clicking a button to create a new branch.\n   *\n   * @param event - event object\n   */\n  private _onNewBranchClick = (): void => {\n    if (!this.props.branching) {\n      showErrorMessage('Creating a new branch is disabled', CHANGES_ERR_MSG);\n      return;\n    }\n    this.setState({\n      branchDialog: true\n    });\n  };\n\n  /**\n   * Callback invoked upon closing a dialog to create a new branch.\n   */\n  private _onNewBranchDialogClose = (): void => {\n    this.setState({\n      branchDialog: false\n    });\n  };\n\n  /**\n   * Returns a callback which is invoked upon clicking a branch name.\n   *\n   * @param branch - branch name\n   * @returns callback\n   */\n  private _onBranchClickFactory(branch: string) {\n    const self = this;\n    return onClick;\n\n    /**\n     * Callback invoked upon clicking a branch name.\n     *\n     * @private\n     * @param event - event object\n     * @returns promise which resolves upon attempting to switch branches\n     */\n    async function onClick(): Promise<void> {\n      if (!self.props.branching) {\n        showErrorMessage('Switching branches is disabled', CHANGES_ERR_MSG);\n        return;\n      }\n      const opts = {\n        branchname: branch\n      };\n\n      self._log({\n        severity: 'info',\n        message: 'Switching branch...'\n      });\n      self._suspend(true);\n\n      let result: Array<any>;\n      try {\n        result = await Promise.all([\n          sleep(1000),\n          self.props.model.checkout(opts)\n        ]);\n      } catch (err) {\n        self._suspend(false);\n        self._log({\n          severity: 'error',\n          message: 'Failed to switch branch.'\n        });\n        return onBranchError(err);\n      }\n      self._suspend(false);\n      const res = result[1] as Git.ICheckoutResult;\n      if (res.code !== 0) {\n        self._log({\n          severity: 'error',\n          message: 'Failed to switch branch.'\n        });\n        showErrorMessage('Error switching branch', res.message);\n        return;\n      }\n      self._log({\n        severity: 'success',\n        message: 'Switched branch.'\n      });\n    }\n  }\n\n  /**\n   * Callback invoked upon clicking on the feedback modal.\n   *\n   * @param event - event object\n   */\n  private _onFeedbackModalClick = (): void => {\n    this._suspend(false);\n  };\n\n  /**\n   * Callback invoked upon closing a feedback alert.\n   *\n   * @param event - event object\n   */\n  private _onFeedbackAlertClose = (): void => {\n    this.setState({\n      alert: false\n    });\n  };\n}\n"]}