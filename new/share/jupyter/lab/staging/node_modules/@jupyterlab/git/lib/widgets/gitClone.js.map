{"version":3,"file":"gitClone.js","sourceRoot":"./@jupyterlab/git/src/","sources":["widgets/gitClone.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Dialog,\n  ReactWidget,\n  showDialog,\n  showErrorMessage,\n  ToolbarButtonComponent,\n  UseSignal\n} from '@jupyterlab/apputils';\nimport { IChangedArgs } from '@jupyterlab/coreutils';\nimport { FileBrowser } from '@jupyterlab/filebrowser';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport { AUTH_ERROR_MESSAGES } from '../git';\nimport { cloneIcon } from '../style/icons';\nimport { IGitExtension } from '../tokens';\nimport { GitCredentialsForm } from './CredentialsBox';\n\nexport function addCloneButton(model: IGitExtension, filebrowser: FileBrowser) {\n  filebrowser.toolbar.addItem(\n    'gitClone',\n    ReactWidget.create(\n      <UseSignal\n        signal={model.repositoryChanged}\n        initialArgs={{\n          name: 'pathRepository',\n          oldValue: null,\n          newValue: model.pathRepository\n        }}\n      >\n        {(_, change: IChangedArgs<string | null>) => (\n          <ToolbarButtonComponent\n            enabled={change.newValue === null}\n            icon={cloneIcon}\n            onClick={async () => {\n              await doGitClone(model, filebrowser.model.path);\n              filebrowser.model.refresh();\n            }}\n            tooltip={'Git Clone'}\n          />\n        )}\n      </UseSignal>\n    )\n  );\n}\n\n/**\n * Makes the API call to the server.\n *\n * @param cloneUrl\n */\nasync function makeApiCall(\n  model: IGitExtension,\n  path: string,\n  cloneUrl: string\n) {\n  try {\n    let response = await model.clone(path, cloneUrl);\n\n    let retry = false;\n    while (response.code !== 0) {\n      if (\n        response.code === 128 &&\n        AUTH_ERROR_MESSAGES.map(\n          message => response.message.indexOf(message) > -1\n        ).indexOf(true) > -1\n      ) {\n        // request user credentials and try to clone again\n        const result = await showDialog({\n          title: 'Git credentials required',\n          body: new GitCredentialsForm(\n            'Enter credentials for remote repository',\n            retry ? 'Incorrect username or password.' : ''\n          )\n        });\n        retry = true;\n\n        if (result.button.accept) {\n          // user accepted attempt to login\n          // try to clone again\n          response = await model.clone(path, cloneUrl, result.value);\n        } else {\n          showErrorMessage('Clone failed', response.message, [\n            Dialog.warnButton({ label: 'DISMISS' })\n          ]);\n          break;\n        }\n      } else {\n        showErrorMessage('Clone failed', response.message, [\n          Dialog.warnButton({ label: 'DISMISS' })\n        ]);\n        break;\n      }\n    }\n  } catch (error) {\n    showErrorMessage('Clone failed', error, [\n      Dialog.warnButton({ label: 'DISMISS' })\n    ]);\n  }\n}\n\n/**\n * Callback method on Git Clone button in the File Browser toolbar.\n * 1. Invokes a new dialog box with form fields.\n * 2. Invokes the server API with the form input.\n */\nexport async function doGitClone(\n  model: IGitExtension,\n  path: string\n): Promise<void> {\n  const result = await showDialog({\n    title: 'Clone a repo',\n    body: new GitCloneForm(),\n    focusNodeSelector: 'input',\n    buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'CLONE' })]\n  });\n\n  if (result.button.accept) {\n    if (typeof result.value !== 'undefined' && result.value) {\n      const cloneUrl: string = result.value;\n      await makeApiCall(model, path, cloneUrl);\n    }\n  }\n}\n\n/**\n * The UI for the form fields shown within the Clone modal.\n */\nclass GitCloneForm extends Widget {\n  /**\n   * Create a redirect form.\n   */\n  constructor() {\n    super({ node: GitCloneForm.createFormNode() });\n  }\n\n  private static createFormNode(): HTMLElement {\n    const node = document.createElement('div');\n    const label = document.createElement('label');\n    const input = document.createElement('input');\n    const text = document.createElement('span');\n    const warning = document.createElement('div');\n\n    node.className = 'jp-RedirectForm';\n    warning.className = 'jp-RedirectForm-warning';\n    text.textContent = 'Enter the Clone URI of the repository';\n    input.placeholder = 'https://host.com/org/repo.git';\n\n    label.appendChild(text);\n    label.appendChild(input);\n    node.appendChild(label);\n    node.appendChild(warning);\n    return node;\n  }\n\n  /**\n   * Returns the input value.\n   */\n  getValue(): string {\n    return encodeURIComponent(this.node.querySelector('input').value);\n  }\n}\n"]}