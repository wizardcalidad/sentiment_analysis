{"version":3,"file":"PlainTextDiff.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/diff/PlainTextDiff.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Mode } from '@jupyterlab/codemirror';\nimport { ServerConnection } from '@jupyterlab/services';\n\nimport * as React from 'react';\n\nimport { IDiffProps } from './Diff';\nimport { httpGitRequest } from '../../git';\nimport { mergeView } from './mergeview';\nimport { IDiffContext } from './model';\n\ninterface ICurrentReference {\n  special?: 'WORKING' | 'INDEX';\n  git?: string;\n}\n\nexport interface IPlainTextDiffState {\n  errorMessage: string;\n}\n\n/**\n * A React component to render the diff of a plain text file\n *\n * 1. It calls the `/git/diffcontent` API on the server to get the previous and current content\n * 2. Renders the content using CodeMirror merge addon\n */\nexport class PlainTextDiff extends React.Component<\n  IDiffProps,\n  IPlainTextDiffState\n> {\n  constructor(props: IDiffProps) {\n    super(props);\n    this.state = { errorMessage: null };\n    this._mergeViewRef = React.createRef<HTMLDivElement>();\n  }\n\n  componentDidMount() {\n    this._performDiff(this.props.diffContext);\n  }\n\n  render() {\n    if (this.state.errorMessage !== null) {\n      return (\n        <div>\n          <span className=\"jp-git-diff-error\">\n            Failed to fetch diff with error:\n            <span className=\"jp-git-diff-error-message\">\n              {this.state.errorMessage}\n            </span>\n          </span>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"jp-git-diff-Widget\">\n          <div className=\"jp-git-diff-root\">\n            <div ref={this._mergeViewRef} className=\"jp-git-PlainText-diff\" />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  /**\n   * Based on the Diff Context , calls the server API with the relevant parameters\n   * to\n   * @param diffContext the context in which to perform the diff\n   */\n  private _performDiff(diffContext: IDiffContext): void {\n    try {\n      // Resolve what API parameter to call.\n      let currentRefValue: ICurrentReference;\n      if ('specialRef' in diffContext.currentRef) {\n        currentRefValue = {\n          special: diffContext.currentRef.specialRef\n        };\n      } else {\n        currentRefValue = {\n          git: diffContext.currentRef.gitRef\n        };\n      }\n\n      httpGitRequest('/git/diffcontent', 'POST', {\n        filename: this.props.path,\n        prev_ref: { git: diffContext.previousRef.gitRef },\n        curr_ref: currentRefValue,\n        top_repo_path: this.props.topRepoPath\n      }).then(response => {\n        response\n          .json()\n          .then(data => {\n            if (response.status !== 200) {\n              // Handle error\n              this.setState({\n                errorMessage:\n                  data.message || 'Unknown error. Please check the server log.'\n              });\n            } else {\n              this._addDiffViewer(data['prev_content'], data['curr_content']);\n            }\n          })\n          .catch(reason => {\n            console.error(reason);\n            // Handle error\n            this.setState({\n              errorMessage:\n                reason.message || 'Unknown error. Please check the server log.'\n            });\n          });\n      });\n    } catch (err) {\n      console.error(err);\n      throw ServerConnection.NetworkError;\n    }\n  }\n\n  /**\n   * Creates and adds a diff viewer to the DOM with given content\n   *\n   * @param prevContent the raw value of the previous content\n   * @param currContent the raw value of the current content\n   */\n  private _addDiffViewer(prevContent: string, currContent: string) {\n    const mode =\n      Mode.findByFileName(this.props.path) || Mode.findBest(this.props.path);\n\n    mergeView(this._mergeViewRef.current, {\n      value: currContent,\n      orig: prevContent,\n      lineNumbers: true,\n      mode: mode.mime,\n      theme: 'jupyter',\n      connect: 'align',\n      collapseIdentical: true,\n      revertButtons: false\n    });\n  }\n\n  private _mergeViewRef: React.RefObject<HTMLDivElement>;\n}\n"]}