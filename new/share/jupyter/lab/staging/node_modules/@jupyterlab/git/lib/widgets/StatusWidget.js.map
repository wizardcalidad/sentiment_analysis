{"version":3,"file":"StatusWidget.js","sourceRoot":"./@jupyterlab/git/src/","sources":["widgets/StatusWidget.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { Widget } from '@lumino/widgets';\nimport { statusWidgetClass } from '../style/StatusWidget';\nimport { IGitExtension } from '../tokens';\nimport { sleep } from '../utils';\n\n/**\n * Class for creating a status bar widget.\n */\nexport class StatusWidget extends Widget {\n  /**\n   * Returns a status bar widget.\n   *\n   * @returns widget\n   */\n  constructor() {\n    super();\n    this.addClass(statusWidgetClass);\n  }\n\n  /**\n   * Sets the current status.\n   */\n  set status(text: string) {\n    this._status = text;\n    if (!this._locked) {\n      this._lock();\n      this.refresh();\n    }\n  }\n\n  /**\n   * Refreshes the status widget.\n   */\n  refresh(): void {\n    this.node.textContent = 'Git: ' + this._status;\n  }\n\n  /**\n   * Locks the status widget to prevent updates.\n   *\n   * ## Notes\n   *\n   * -   This is used to throttle updates in order to prevent \"flashing\" messages.\n   */\n  async _lock(): Promise<void> {\n    this._locked = true;\n    await sleep(500);\n    this._locked = false;\n    this.refresh();\n  }\n\n  /**\n   * Boolean indicating whether the status widget is accepting updates.\n   */\n  private _locked = false;\n\n  /**\n   * Status string.\n   */\n  private _status = '';\n}\n\nexport function addStatusBarWidget(\n  statusBar: IStatusBar,\n  model: IGitExtension,\n  settings: ISettingRegistry.ISettings\n): void {\n  // Add a status bar widget to provide Git status updates:\n  const statusWidget = new StatusWidget();\n  statusBar.registerStatusItem('git-status', {\n    align: 'left',\n    item: statusWidget,\n    isActive: Private.isStatusWidgetActive(settings),\n    activeStateChanged: settings && settings.changed\n  });\n  model.logger.connect(Private.createEventCallback(statusWidget));\n}\n/* eslint-disable no-inner-declarations */\nnamespace Private {\n  /**\n   * Returns a callback for updating a status widget upon receiving model events.\n   *\n   * @private\n   * @param widget - status widget\n   * @returns callback\n   */\n  export function createEventCallback(widget: StatusWidget) {\n    return onEvent;\n\n    /**\n     * Callback invoked upon a model event.\n     *\n     * @private\n     * @param model - extension model\n     * @param event - event name\n     */\n    function onEvent(model: IGitExtension, event: string) {\n      let status;\n      switch (event) {\n        case 'git:checkout':\n          status = 'checking out...';\n          break;\n        case 'git:clone':\n          status = 'cloning repository...';\n          break;\n        case 'git:commit:create':\n          status = 'committing changes...';\n          break;\n        case 'git:commit:revert':\n          status = 'reverting changes...';\n          break;\n        case 'git:idle':\n          status = 'idle';\n          break;\n        case 'git:init':\n          status = 'initializing repository...';\n          break;\n        case 'git:pull':\n          status = 'pulling changes...';\n          break;\n        case 'git:pushing':\n          status = 'pushing changes...';\n          break;\n        case 'git:refresh':\n          status = 'refreshing...';\n          break;\n        case 'git:reset:changes':\n          status = 'resetting changes...';\n          break;\n        case 'git:reset:hard':\n          status = 'discarding changes...';\n          break;\n        default:\n          if (/git:add:files/.test(event)) {\n            status = 'adding files...';\n          } else {\n            status = 'working...';\n          }\n          break;\n      }\n      widget.status = status;\n    }\n  }\n\n  /**\n   * Returns a callback which returns a boolean indicating whether the extension should display status updates.\n   *\n   * @private\n   * @param settings - extension settings\n   * @returns callback\n   */\n  export function isStatusWidgetActive(settings?: ISettingRegistry.ISettings) {\n    return settings ? isActive : inactive;\n\n    /**\n     * Returns a boolean indicating that the extension should not display status updates.\n     *\n     * @private\n     * @returns boolean indicating that the extension should not display status updates\n     */\n    function inactive(): boolean {\n      return false;\n    }\n\n    /**\n     * Returns a boolean indicating whether the extension should display status updates.\n     *\n     * @private\n     * @returns boolean indicating whether the extension should display status updates\n     */\n    function isActive(): boolean {\n      return settings.composite.displayStatus as boolean;\n    }\n  }\n}\n/* eslint-enable no-inner-declarations */\n"]}