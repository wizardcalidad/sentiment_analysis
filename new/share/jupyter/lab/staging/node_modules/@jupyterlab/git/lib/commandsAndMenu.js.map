{"version":3,"file":"commandsAndMenu.js","sourceRoot":"./@jupyterlab/git/src/","sources":["commandsAndMenu.ts"],"names":[],"mappings":"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","sourcesContent":["import { JupyterFrontEnd } from '@jupyterlab/application';\nimport {\n  Dialog,\n  InputDialog,\n  MainAreaWidget,\n  showDialog,\n  showErrorMessage\n} from '@jupyterlab/apputils';\nimport { FileBrowser } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITerminal } from '@jupyterlab/terminal';\nimport { CommandRegistry } from '@lumino/commands';\nimport { Menu } from '@lumino/widgets';\nimport { IGitExtension } from './tokens';\nimport { GitCredentialsForm } from './widgets/CredentialsBox';\nimport { doGitClone } from './widgets/gitClone';\nimport { GitPullPushDialog, Operation } from './widgets/gitPushPull';\n\nconst RESOURCES = [\n  {\n    text: 'Set Up Remotes',\n    url: 'https://www.atlassian.com/git/tutorials/setting-up-a-repository'\n  },\n  {\n    text: 'Git Documentation',\n    url: 'https://git-scm.com/doc'\n  }\n];\n\n/**\n * The command IDs used by the git plugin.\n */\nexport namespace CommandIDs {\n  export const gitUI = 'git:ui';\n  export const gitTerminalCommand = 'git:terminal-command';\n  export const gitInit = 'git:init';\n  export const gitOpenUrl = 'git:open-url';\n  export const gitToggleSimpleStaging = 'git:toggle-simple-staging';\n  export const gitToggleDoubleClickDiff = 'git:toggle-double-click-diff';\n  export const gitAddRemote = 'git:add-remote';\n  export const gitClone = 'git:clone';\n  export const gitOpenGitignore = 'git:open-gitignore';\n  export const gitPush = 'git:push';\n  export const gitPull = 'git:pull';\n}\n\n/**\n * Add the commands for the git extension.\n */\nexport function addCommands(\n  app: JupyterFrontEnd,\n  model: IGitExtension,\n  fileBrowser: FileBrowser,\n  settings: ISettingRegistry.ISettings\n) {\n  const { commands, shell } = app;\n\n  /**\n   * Add open terminal in the Git repository\n   */\n  commands.addCommand(CommandIDs.gitTerminalCommand, {\n    label: 'Open Git Repository in Terminal',\n    caption: 'Open a New Terminal to the Git Repository',\n    execute: async args => {\n      const main = (await commands.execute(\n        'terminal:create-new',\n        args\n      )) as MainAreaWidget<ITerminal.ITerminal>;\n\n      try {\n        if (model.pathRepository !== null) {\n          const terminal = main.content;\n          terminal.session.send({\n            type: 'stdin',\n            content: [`cd \"${model.pathRepository.split('\"').join('\\\\\"')}\"\\n`]\n          });\n        }\n\n        return main;\n      } catch (e) {\n        console.error(e);\n        main.dispose();\n      }\n    },\n    isEnabled: () => model.pathRepository !== null\n  });\n\n  /** Add open/go to git interface command */\n  commands.addCommand(CommandIDs.gitUI, {\n    label: 'Git Interface',\n    caption: 'Go to Git user interface',\n    execute: () => {\n      try {\n        shell.activateById('jp-git-sessions');\n      } catch (err) {\n        console.error('Fail to open Git tab.');\n      }\n    }\n  });\n\n  /** Add git init command */\n  commands.addCommand(CommandIDs.gitInit, {\n    label: 'Initialize a Repository',\n    caption: 'Create an empty Git repository or reinitialize an existing one',\n    execute: async () => {\n      const currentPath = fileBrowser.model.path;\n      const result = await showDialog({\n        title: 'Initialize a Repository',\n        body: 'Do you really want to make this directory a Git Repo?',\n        buttons: [Dialog.cancelButton(), Dialog.warnButton({ label: 'Yes' })]\n      });\n\n      if (result.button.accept) {\n        await model.init(currentPath);\n        model.pathRepository = currentPath;\n      }\n    },\n    isEnabled: () => model.pathRepository === null\n  });\n\n  /** Open URL externally */\n  commands.addCommand(CommandIDs.gitOpenUrl, {\n    label: args => args['text'] as string,\n    execute: args => {\n      const url = args['url'] as string;\n      window.open(url);\n    }\n  });\n\n  /** add toggle for simple staging */\n  commands.addCommand(CommandIDs.gitToggleSimpleStaging, {\n    label: 'Simple staging',\n    isToggled: () => !!settings.composite['simpleStaging'],\n    execute: args => {\n      settings.set('simpleStaging', !settings.composite['simpleStaging']);\n    }\n  });\n\n  /** add toggle for double click opens diffs */\n  commands.addCommand(CommandIDs.gitToggleDoubleClickDiff, {\n    label: 'Double click opens diff',\n    isToggled: () => !!settings.composite['doubleClickDiff'],\n    execute: args => {\n      settings.set('doubleClickDiff', !settings.composite['doubleClickDiff']);\n    }\n  });\n\n  /** Command to add a remote Git repository */\n  commands.addCommand(CommandIDs.gitAddRemote, {\n    label: 'Add Remote Repository',\n    caption: 'Add a Git remote repository',\n    isEnabled: () => model.pathRepository !== null,\n    execute: async args => {\n      if (model.pathRepository === null) {\n        console.warn('Not in a Git repository. Unable to add a remote.');\n        return;\n      }\n      let url = args['url'] as string;\n      const name = args['name'] as string;\n\n      if (!url) {\n        const result = await InputDialog.getText({\n          title: 'Add a remote repository',\n          placeholder: 'Remote Git repository URL'\n        });\n\n        if (result.button.accept) {\n          url = result.value;\n        }\n      }\n\n      if (url) {\n        try {\n          await model.addRemote(url, name);\n        } catch (error) {\n          console.error(error);\n          showErrorMessage('Error when adding remote repository', error);\n        }\n      }\n    }\n  });\n\n  /** Add git clone command */\n  commands.addCommand(CommandIDs.gitClone, {\n    label: 'Clone a Repository',\n    caption: 'Clone a repository from a URL',\n    isEnabled: () => model.pathRepository === null,\n    execute: async () => {\n      await doGitClone(model, fileBrowser.model.path);\n      fileBrowser.model.refresh();\n    }\n  });\n\n  /** Add git open gitignore command */\n  commands.addCommand(CommandIDs.gitOpenGitignore, {\n    label: 'Open .gitignore',\n    caption: 'Open .gitignore',\n    isEnabled: () => model.pathRepository !== null,\n    execute: async () => {\n      await model.ensureGitignore();\n    }\n  });\n\n  /** Add git push command */\n  commands.addCommand(CommandIDs.gitPush, {\n    label: 'Push to Remote',\n    caption: 'Push code to remote repository',\n    isEnabled: () => model.pathRepository !== null,\n    execute: async () => {\n      await Private.showGitOperationDialog(model, Operation.Push).catch(\n        reason => {\n          console.error(\n            `Encountered an error when pushing changes. Error: ${reason}`\n          );\n        }\n      );\n    }\n  });\n\n  /** Add git pull command */\n  commands.addCommand(CommandIDs.gitPull, {\n    label: 'Pull from Remote',\n    caption: 'Pull latest code from remote repository',\n    isEnabled: () => model.pathRepository !== null,\n    execute: async () => {\n      await Private.showGitOperationDialog(model, Operation.Pull).catch(\n        reason => {\n          console.error(\n            `Encountered an error when pulling changes. Error: ${reason}`\n          );\n        }\n      );\n    }\n  });\n}\n\n/**\n * Adds commands and menu items.\n *\n * @private\n * @param app - Jupyter front end\n * @param gitExtension - Git extension instance\n * @param fileBrowser - file browser instance\n * @param settings - extension settings\n * @returns menu\n */\nexport function createGitMenu(commands: CommandRegistry): Menu {\n  const menu = new Menu({ commands });\n  menu.title.label = 'Git';\n  [\n    CommandIDs.gitInit,\n    CommandIDs.gitClone,\n    CommandIDs.gitPush,\n    CommandIDs.gitPull,\n    CommandIDs.gitAddRemote,\n    CommandIDs.gitTerminalCommand\n  ].forEach(command => {\n    menu.addItem({ command });\n  });\n\n  menu.addItem({ type: 'separator' });\n\n  menu.addItem({ command: CommandIDs.gitToggleSimpleStaging });\n\n  menu.addItem({ command: CommandIDs.gitToggleDoubleClickDiff });\n\n  menu.addItem({ type: 'separator' });\n\n  menu.addItem({ command: CommandIDs.gitOpenGitignore });\n\n  menu.addItem({ type: 'separator' });\n\n  const tutorial = new Menu({ commands });\n  tutorial.title.label = ' Help ';\n  RESOURCES.map(args => {\n    tutorial.addItem({\n      args,\n      command: CommandIDs.gitOpenUrl\n    });\n  });\n\n  menu.addItem({ type: 'submenu', submenu: tutorial });\n\n  return menu;\n}\n\n/* eslint-disable no-inner-declarations */\nnamespace Private {\n  /**\n   * Displays an error dialog when a Git operation fails.\n   *\n   * @private\n   * @param model - Git extension model\n   * @param operation - Git operation name\n   * @returns Promise for displaying a dialog\n   */\n  export async function showGitOperationDialog(\n    model: IGitExtension,\n    operation: Operation\n  ): Promise<void> {\n    const title = `Git ${operation}`;\n    let result = await showDialog({\n      title: title,\n      body: new GitPullPushDialog(model, operation),\n      buttons: [Dialog.okButton({ label: 'DISMISS' })]\n    });\n    let retry = false;\n    while (!result.button.accept) {\n      const credentials = await showDialog({\n        title: 'Git credentials required',\n        body: new GitCredentialsForm(\n          'Enter credentials for remote repository',\n          retry ? 'Incorrect username or password.' : ''\n        ),\n        buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'OK' })]\n      });\n\n      if (!credentials.button.accept) {\n        break;\n      }\n\n      result = await showDialog({\n        title: title,\n        body: new GitPullPushDialog(model, operation, credentials.value),\n        buttons: [Dialog.okButton({ label: 'DISMISS' })]\n      });\n      retry = true;\n    }\n  }\n}\n/* eslint-enable no-inner-declarations */\n"]}