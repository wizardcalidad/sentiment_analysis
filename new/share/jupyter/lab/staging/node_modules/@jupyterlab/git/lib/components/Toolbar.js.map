{"version":3,"file":"Toolbar.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/Toolbar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EACL,aAAa,EACb,WAAW,EACX,WAAW,EACZ,MAAM,2BAA2B,CAAC;AACnC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EACL,UAAU,EACV,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,OAAO,EACR,MAAM,gBAAgB,CAAC;AACxB,OAAO,EACL,MAAM,EACN,kBAAkB,EAClB,YAAY,EACZ,sBAAsB,EACtB,6BAA6B,EAC7B,0BAA0B,EAC1B,8BAA8B,EAC9B,2BAA2B,EAC3B,kCAAkC,EAClC,uBAAuB,EACvB,eAAe,EAChB,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAqE9C;;GAEG;AACH,MAAM,OAAO,OAAQ,SAAQ,KAAK,CAAC,SAAuC;IACxE;;;;;OAKG;IACH,YAAY,KAAoB;QAC9B,KAAK,CAAC,KAAK,CAAC,CAAC;QAwOf;;;;;WAKG;QACK,iBAAY,GAAG,GAAS,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC3C,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC;QAEF;;;;;WAKG;QACK,iBAAY,GAAG,GAAS,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC3C,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC;QAEF;;;;WAIG;QACK,uBAAkB,GAAG,GAAS,EAAE;YACtC,8BAA8B;YAC9B,IAAI,CAAC,QAAQ,CAAC;gBACZ,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ;aAC/B,CAAC,CAAC;QACL,CAAC,CAAC;QAEF;;;;WAIG;QACK,mBAAc,GAAG,GAAS,EAAE;YAClC,0BAA0B;YAC1B,IAAI,CAAC,QAAQ,CAAC;gBACZ,UAAU,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU;aACnC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF;;;;;WAKG;QACK,oBAAe,GAAG,KAAK,IAAmB,EAAE;YAClD,IAAI,CAAC,IAAI,CAAC;gBACR,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,eAAe;aACzB,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACpB,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,CAAC;gBACR,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,yBAAyB;aACnC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF;;;;WAIG;QACK,0BAAqB,GAAG,GAAS,EAAE;YACzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC;QAEF;;;;WAIG;QACK,0BAAqB,GAAG,GAAS,EAAE;YACzC,IAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,EAAE,KAAK;aACb,CAAC,CAAC;QACL,CAAC,CAAC;QAEF;;;;WAIG;QACK,gBAAW,GAAG,KAAK,IAAmB,EAAE;YAC9C,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC;gBAC9B,KAAK,EAAE,cAAc;gBACrB,IAAI,EAAE,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;aACzC,CAAC,CAAC;YACH,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;gBACxB,IAAI,CAAC,IAAI,CAAC;oBACR,QAAQ,EAAE,MAAM;oBAChB,OAAO,EAAE,gBAAgB,MAAM,CAAC,KAAK,KAAK;iBAC3C,CAAC,CAAC;gBACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAEpB,IAAI,QAA6B,CAAC;gBAClC,IAAI;oBACF,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBAC7D;gBAAC,OAAO,KAAK,EAAE;oBACd,QAAQ,GAAG;wBACT,IAAI,EAAE,CAAC,CAAC;wBACR,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK;qBAChC,CAAC;iBACH;wBAAS;oBACR,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;iBACtB;gBAED,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE;oBACvB,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBAChC,IAAI,CAAC,IAAI,CAAC;wBACR,QAAQ,EAAE,OAAO;wBACjB,OAAO,EAAE,wBAAwB,MAAM,CAAC,KAAK,EAAE;qBAChD,CAAC,CAAC;iBACJ;qBAAM;oBACL,IAAI,CAAC,IAAI,CAAC;wBACR,QAAQ,EAAE,SAAS;wBACnB,OAAO,EAAE,eAAe,MAAM,CAAC,KAAK,EAAE;qBACvC,CAAC,CAAC;iBACJ;aACF;QACH,CAAC,CAAC;QA9WA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC;QAE7C,IAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,IAAI,IAAI,EAAE;YACtB,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YACvD,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK;YACZ,GAAG,EAAE;gBACH,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,EAAE;aACZ;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,MAAM;QACJ,OAAO,CACL,6BAAK,SAAS,EAAE,YAAY;YACzB,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,eAAe,EAAE;YACtB,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,eAAe,EAAE,CACnB,CACP,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,aAAa;QACnB,OAAO,CACL,6BAAK,SAAS,EAAE,eAAe;YAC7B,8BAAM,SAAS,EAAE,MAAM,GAAI;YAC3B,oBAAC,YAAY,IACX,SAAS,EAAE,kBAAkB,EAC7B,IAAI,EAAE,QAAQ,EACd,OAAO,EAAE,IAAI,CAAC,YAAY,EAC1B,KAAK,EAAE,qBAAqB,GAC5B;YACF,oBAAC,YAAY,IACX,SAAS,EAAE,kBAAkB,EAC7B,IAAI,EAAE,QAAQ,EACd,OAAO,EAAE,IAAI,CAAC,YAAY,EAC1B,KAAK,EAAE,wBAAwB,GAC/B;YACF,oBAAC,YAAY,IACX,SAAS,EAAE,kBAAkB,EAC7B,IAAI,EAAE,OAAO,EACb,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,KAAK,EAAE,gBAAgB,GACvB;YACF,oBAAC,YAAY,IACX,SAAS,EAAE,kBAAkB,EAC7B,IAAI,EAAE,WAAW,EACjB,OAAO,EAAE,IAAI,CAAC,eAAe,EAC7B,KAAK,EAAE,2DAA2D,GAClE,CACE,CACP,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,eAAe;QACrB,OAAO,CACL,6BAAK,SAAS,EAAE,uBAAuB;YACrC,gCACE,QAAQ,QACR,SAAS,EAAE,sBAAsB,EACjC,KAAK,EAAE,uBAAuB,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EACrD,OAAO,EAAE,IAAI,CAAC,kBAAkB;gBAEhC,oBAAC,WAAW,CAAC,KAAK,IAAC,SAAS,EAAE,0BAA0B,GAAI;gBAC5D,6BAAK,SAAS,EAAE,kCAAkC;oBAChD,2BAAG,SAAS,EAAE,2BAA2B,yBAAwB;oBACjE,2BAAG,SAAS,EAAE,8BAA8B,IACzC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CACtC,CACA,CACC;YACR,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC9B,CACP,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,iBAAiB;QACvB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;QACD,OAAO,CACL,6BAAK,SAAS,EAAE,uBAAuB;YACrC,gCACE,SAAS,EAAE,OAAO,CAChB,sBAAsB,EACtB,6BAA6B,CAC9B,EACD,KAAK,EAAE,8BAA8B,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EACxD,OAAO,EAAE,IAAI,CAAC,cAAc;gBAE5B,oBAAC,UAAU,CAAC,KAAK,IAAC,SAAS,EAAE,0BAA0B,GAAI;gBAC3D,6BAAK,SAAS,EAAE,kCAAkC;oBAChD,2BAAG,SAAS,EAAE,2BAA2B,qBAAoB;oBAC7D,2BAAG,SAAS,EAAE,8BAA8B,IACzC,IAAI,CAAC,KAAK,CAAC,MAAM,CAChB,CACA;gBACL,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CACvB,oBAAC,WAAW,CAAC,KAAK,IAAC,SAAS,EAAE,0BAA0B,GAAI,CAC7D,CAAC,CAAC,CAAC,CACF,oBAAC,aAAa,CAAC,KAAK,IAAC,SAAS,EAAE,0BAA0B,GAAI,CAC/D,CACM;YACR,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CACvB,oBAAC,UAAU,IACT,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,GAC3B,CACH,CAAC,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,eAAe;QACrB,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ;YACb,oBAAC,YAAY,IACX,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAC9C,OAAO,EAAE,IAAI,CAAC,qBAAqB,GACnC;YACF,oBAAC,KAAK,IACJ,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACtB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAC/B,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EACjC,OAAO,EAAE,IAAI,CAAC,qBAAqB,GACnC,CACa,CAClB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,aAAa;QACnB,0EAA0E;QAC1E,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAE5D,gJAAgJ;QAChJ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACK,gBAAgB;QACtB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACK,UAAU;QAChB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,QAAQ,CAAC;YACZ,UAAU,EAAE,IAAI,IAAI,EAAE;YACtB,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;SACxD,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACK,QAAQ,CAAC,IAAa;QAC5B,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACtB,IAAI,CAAC,QAAQ,CAAC;gBACZ,OAAO,EAAE,IAAI;aACd,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;;OAIG;IACK,IAAI,CAAC,GAAgB;QAC3B,IAAI,CAAC,QAAQ,CAAC;YACZ,KAAK,EAAE,IAAI;YACX,GAAG,EAAE,GAAG;SACT,CAAC,CAAC;IACL,CAAC;CA2IF","sourcesContent":["import { showDialog } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport {\n  caretDownIcon,\n  caretUpIcon,\n  refreshIcon\n} from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { classes } from 'typestyle';\nimport { CommandIDs } from '../commandsAndMenu';\nimport {\n  branchIcon,\n  desktopIcon,\n  pullIcon,\n  pushIcon,\n  tagIcon\n} from '../style/icons';\nimport {\n  spacer,\n  toolbarButtonClass,\n  toolbarClass,\n  toolbarMenuButtonClass,\n  toolbarMenuButtonEnabledClass,\n  toolbarMenuButtonIconClass,\n  toolbarMenuButtonSubtitleClass,\n  toolbarMenuButtonTitleClass,\n  toolbarMenuButtonTitleWrapperClass,\n  toolbarMenuWrapperClass,\n  toolbarNavClass\n} from '../style/Toolbar';\nimport { IGitExtension, ILogMessage, Git } from '../tokens';\nimport { sleep } from '../utils';\nimport { GitTagDialog } from '../widgets/TagList';\nimport { ActionButton } from './ActionButton';\nimport { Alert } from './Alert';\nimport { BranchMenu } from './BranchMenu';\nimport { SuspendModal } from './SuspendModal';\n\n/**\n * Interface describing component properties.\n */\nexport interface IToolbarProps {\n  /**\n   * Git extension data model.\n   */\n  model: IGitExtension;\n\n  /**\n   * Boolean indicating whether branching is disabled.\n   */\n  branching: boolean;\n\n  /**\n   * Boolean indicating whether to enable UI suspension.\n   */\n  suspend: boolean;\n\n  /**\n   * Callback to invoke in order to refresh a repository.\n   *\n   * @returns promise which refreshes a repository\n   */\n  refresh: () => Promise<void>;\n}\n\n/**\n * Interface describing component state.\n */\nexport interface IToolbarState {\n  /**\n   * Boolean indicating whether a branch menu is shown.\n   */\n  branchMenu: boolean;\n\n  /**\n   * Boolean indicating whether a repository menu is shown.\n   */\n  repoMenu: boolean;\n\n  /**\n   * Current repository.\n   */\n  repository: string;\n\n  /**\n   * Current branch name.\n   */\n  branch: string;\n\n  /**\n   * Boolean indicating whether UI interaction should be suspended (e.g., due to pending command).\n   */\n  suspend: boolean;\n\n  /**\n   * Boolean indicating whether to show an alert.\n   */\n  alert: boolean;\n\n  /**\n   * Log message.\n   */\n  log: ILogMessage;\n}\n\n/**\n * React component for rendering a panel toolbar.\n */\nexport class Toolbar extends React.Component<IToolbarProps, IToolbarState> {\n  /**\n   * Returns a React component for rendering a panel toolbar.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: IToolbarProps) {\n    super(props);\n\n    const repo = this.props.model.pathRepository;\n\n    this.state = {\n      branchMenu: false,\n      repoMenu: false,\n      repository: repo || '',\n      branch: repo ? this.props.model.currentBranch.name : '',\n      suspend: false,\n      alert: false,\n      log: {\n        severity: 'info',\n        message: ''\n      }\n    };\n  }\n\n  /**\n   * Callback invoked immediately after mounting a component (i.e., inserting into a tree).\n   */\n  componentDidMount(): void {\n    this._addListeners();\n  }\n\n  /**\n   * Callback invoked when a component will no longer be mounted.\n   */\n  componentWillUnmount(): void {\n    this._removeListeners();\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <div className={toolbarClass}>\n        {this._renderTopNav()}\n        {this._renderRepoMenu()}\n        {this._renderBranchMenu()}\n        {this._renderFeedback()}\n      </div>\n    );\n  }\n\n  /**\n   * Renders the top navigation.\n   *\n   * @returns React element\n   */\n  private _renderTopNav(): React.ReactElement {\n    return (\n      <div className={toolbarNavClass}>\n        <span className={spacer} />\n        <ActionButton\n          className={toolbarButtonClass}\n          icon={pullIcon}\n          onClick={this._onPullClick}\n          title={'Pull latest changes'}\n        />\n        <ActionButton\n          className={toolbarButtonClass}\n          icon={pushIcon}\n          onClick={this._onPushClick}\n          title={'Push committed changes'}\n        />\n        <ActionButton\n          className={toolbarButtonClass}\n          icon={tagIcon}\n          onClick={this._onTagClick}\n          title={'Checkout a tag'}\n        />\n        <ActionButton\n          className={toolbarButtonClass}\n          icon={refreshIcon}\n          onClick={this._onRefreshClick}\n          title={'Refresh the repository to detect local and remote changes'}\n        />\n      </div>\n    );\n  }\n\n  /**\n   * Renders a repository menu.\n   *\n   * @returns React element\n   */\n  private _renderRepoMenu(): React.ReactElement {\n    return (\n      <div className={toolbarMenuWrapperClass}>\n        <button\n          disabled\n          className={toolbarMenuButtonClass}\n          title={`Current repository: ${this.state.repository}`}\n          onClick={this._onRepositoryClick}\n        >\n          <desktopIcon.react className={toolbarMenuButtonIconClass} />\n          <div className={toolbarMenuButtonTitleWrapperClass}>\n            <p className={toolbarMenuButtonTitleClass}>Current Repository</p>\n            <p className={toolbarMenuButtonSubtitleClass}>\n              {PathExt.basename(this.state.repository)}\n            </p>\n          </div>\n        </button>\n        {this.state.repoMenu ? null : null}\n      </div>\n    );\n  }\n\n  /**\n   * Renders a branch menu.\n   *\n   * @returns React element\n   */\n  private _renderBranchMenu(): React.ReactElement | null {\n    if (!this.props.model.pathRepository) {\n      return null;\n    }\n    return (\n      <div className={toolbarMenuWrapperClass}>\n        <button\n          className={classes(\n            toolbarMenuButtonClass,\n            toolbarMenuButtonEnabledClass\n          )}\n          title={`Change the current branch: ${this.state.branch}`}\n          onClick={this._onBranchClick}\n        >\n          <branchIcon.react className={toolbarMenuButtonIconClass} />\n          <div className={toolbarMenuButtonTitleWrapperClass}>\n            <p className={toolbarMenuButtonTitleClass}>Current Branch</p>\n            <p className={toolbarMenuButtonSubtitleClass}>\n              {this.state.branch}\n            </p>\n          </div>\n          {this.state.branchMenu ? (\n            <caretUpIcon.react className={toolbarMenuButtonIconClass} />\n          ) : (\n            <caretDownIcon.react className={toolbarMenuButtonIconClass} />\n          )}\n        </button>\n        {this.state.branchMenu ? (\n          <BranchMenu\n            model={this.props.model}\n            branching={this.props.branching}\n            suspend={this.props.suspend}\n          />\n        ) : null}\n      </div>\n    );\n  }\n\n  /**\n   * Renders a component to provide UI feedback.\n   *\n   * @returns React element\n   */\n  private _renderFeedback(): React.ReactElement {\n    return (\n      <React.Fragment>\n        <SuspendModal\n          open={this.props.suspend && this.state.suspend}\n          onClick={this._onFeedbackModalClick}\n        />\n        <Alert\n          open={this.state.alert}\n          message={this.state.log.message}\n          severity={this.state.log.severity}\n          onClose={this._onFeedbackAlertClose}\n        />\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Adds model listeners.\n   */\n  private _addListeners(): void {\n    // When the HEAD changes, decent probability that we've switched branches:\n    this.props.model.headChanged.connect(this._syncState, this);\n\n    // When the status changes, we may have checked out a new branch (e.g., via the command-line and not via the extension) or changed repositories:\n    this.props.model.statusChanged.connect(this._syncState, this);\n  }\n\n  /**\n   * Removes model listeners.\n   */\n  private _removeListeners(): void {\n    this.props.model.headChanged.disconnect(this._syncState, this);\n    this.props.model.statusChanged.disconnect(this._syncState, this);\n  }\n\n  /**\n   * Syncs the component state with the underlying model.\n   */\n  private _syncState(): void {\n    const repo = this.props.model.pathRepository;\n    this.setState({\n      repository: repo || '',\n      branch: repo ? this.props.model.currentBranch.name : ''\n    });\n  }\n\n  /**\n   * Sets the suspension state.\n   *\n   * @param bool - boolean indicating whether to suspend UI interaction\n   */\n  private _suspend(bool: boolean): void {\n    if (this.props.suspend) {\n      this.setState({\n        suspend: bool\n      });\n    }\n  }\n\n  /**\n   * Sets the current component log message.\n   *\n   * @param msg - log message\n   */\n  private _log(msg: ILogMessage): void {\n    this.setState({\n      alert: true,\n      log: msg\n    });\n  }\n\n  /**\n   * Callback invoked upon clicking a button to pull the latest changes.\n   *\n   * @param event - event object\n   * @returns a promise which resolves upon pulling the latest changes\n   */\n  private _onPullClick = (): void => {\n    this._suspend(true);\n    const commands = this.props.model.commands;\n    if (commands) {\n      commands.execute(CommandIDs.gitPull);\n    }\n    this._suspend(false);\n  };\n\n  /**\n   * Callback invoked upon clicking a button to push the latest changes.\n   *\n   * @param event - event object\n   * @returns a promise which resolves upon pushing the latest changes\n   */\n  private _onPushClick = (): void => {\n    this._suspend(true);\n    const commands = this.props.model.commands;\n    if (commands) {\n      commands.execute(CommandIDs.gitPush);\n    }\n    this._suspend(false);\n  };\n\n  /**\n   * Callback invoked upon clicking a button to change the current repository.\n   *\n   * @param event - event object\n   */\n  private _onRepositoryClick = (): void => {\n    // Toggle the repository menu:\n    this.setState({\n      repoMenu: !this.state.repoMenu\n    });\n  };\n\n  /**\n   * Callback invoked upon clicking a button to change the current branch.\n   *\n   * @param event - event object\n   */\n  private _onBranchClick = (): void => {\n    // Toggle the branch menu:\n    this.setState({\n      branchMenu: !this.state.branchMenu\n    });\n  };\n\n  /**\n   * Callback invoked upon clicking a button to refresh a repository.\n   *\n   * @param event - event object\n   * @returns a promise which resolves upon refreshing a repository\n   */\n  private _onRefreshClick = async (): Promise<void> => {\n    this._log({\n      severity: 'info',\n      message: 'Refreshing...'\n    });\n    this._suspend(true);\n    await Promise.all([sleep(1000), this.props.refresh()]);\n    this._suspend(false);\n    this._log({\n      severity: 'success',\n      message: 'Successfully refreshed.'\n    });\n  };\n\n  /**\n   * Callback invoked upon clicking on the feedback modal.\n   *\n   * @param event - event object\n   */\n  private _onFeedbackModalClick = (): void => {\n    this._suspend(false);\n  };\n\n  /**\n   * Callback invoked upon closing a feedback alert.\n   *\n   * @param event - event object\n   */\n  private _onFeedbackAlertClose = (): void => {\n    this.setState({\n      alert: false\n    });\n  };\n\n  /**\n   * Callback invoked upon clicking a button to view tags.\n   *\n   * @param event - event object\n   */\n  private _onTagClick = async (): Promise<void> => {\n    const result = await showDialog({\n      title: 'Checkout tag',\n      body: new GitTagDialog(this.props.model)\n    });\n    if (result.button.accept) {\n      this._log({\n        severity: 'info',\n        message: `Switching to ${result.value}...`\n      });\n      this._suspend(true);\n\n      let response: Git.ICheckoutResult;\n      try {\n        response = await this.props.model.checkoutTag(result.value);\n      } catch (error) {\n        response = {\n          code: -1,\n          message: error.message || error\n        };\n      } finally {\n        this._suspend(false);\n      }\n\n      if (response.code !== 0) {\n        console.error(response.message);\n        this._log({\n          severity: 'error',\n          message: `Fail to checkout tag ${result.value}`\n        });\n      } else {\n        this._log({\n          severity: 'success',\n          message: `Switched to ${result.value}`\n        });\n      }\n    }\n  };\n}\n"]}