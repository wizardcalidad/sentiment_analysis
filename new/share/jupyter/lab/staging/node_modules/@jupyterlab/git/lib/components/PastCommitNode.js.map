{"version":3,"file":"PastCommitNode.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/PastCommitNode.tsx"],"names":[],"mappings":"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","sourcesContent":["import { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { caretDownIcon, caretUpIcon } from '@jupyterlab/ui-components';\nimport * as React from 'react';\nimport { classes } from 'typestyle';\nimport { GitExtension } from '../model';\nimport {\n  branchClass,\n  branchWrapperClass,\n  commitBodyClass,\n  commitExpandedClass,\n  commitHeaderClass,\n  commitHeaderItemClass,\n  commitWrapperClass,\n  iconButtonClass,\n  localBranchClass,\n  remoteBranchClass,\n  workingBranchClass\n} from '../style/PastCommitNode';\nimport { Git } from '../tokens';\nimport { SinglePastCommitInfo } from './SinglePastCommitInfo';\n\n/**\n * Interface describing component properties.\n */\nexport interface IPastCommitNodeProps {\n  /**\n   * Commit data.\n   */\n  commit: Git.ISingleCommitInfo;\n\n  /**\n   * List of branches.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Extension data model.\n   */\n  model: GitExtension;\n\n  /**\n   * Render MIME type registry.\n   */\n  renderMime: IRenderMimeRegistry;\n\n  /**\n   * Boolean indicating whether to enable UI suspension.\n   */\n  suspend: boolean;\n}\n\n/**\n * Interface describing component state.\n */\nexport interface IPastCommitNodeState {\n  /**\n   * Boolean indicating whether additional commit information should be displayed.\n   */\n  expanded: boolean;\n}\n\n/**\n * React component for rendering an individual commit.\n */\nexport class PastCommitNode extends React.Component<\n  IPastCommitNodeProps,\n  IPastCommitNodeState\n> {\n  /**\n   * Returns a React component for rendering an individual commit.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: IPastCommitNodeProps) {\n    super(props);\n    this.state = {\n      expanded: false\n    };\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <li\n        className={classes(\n          commitWrapperClass,\n          this.state.expanded ? commitExpandedClass : null\n        )}\n        onClick={this._onCommitClick}\n      >\n        <div className={commitHeaderClass}>\n          <span className={commitHeaderItemClass}>\n            {this.props.commit.author}\n          </span>\n          <span className={commitHeaderItemClass}>\n            {this.props.commit.commit.slice(0, 7)}\n          </span>\n          <span className={commitHeaderItemClass}>\n            {this.props.commit.date}\n          </span>\n          {this.state.expanded ? (\n            <caretUpIcon.react className={iconButtonClass} tag=\"span\" />\n          ) : (\n            <caretDownIcon.react className={iconButtonClass} tag=\"span\" />\n          )}\n        </div>\n        <div className={branchWrapperClass}>{this._renderBranches()}</div>\n        <div className={commitBodyClass}>\n          {this.props.commit.commit_msg}\n          {this.state.expanded && (\n            <SinglePastCommitInfo\n              commit={this.props.commit}\n              model={this.props.model}\n              renderMime={this.props.renderMime}\n              suspend={this.props.suspend}\n            />\n          )}\n        </div>\n      </li>\n    );\n  }\n\n  /**\n   * Renders branch information.\n   *\n   * @returns array of React elements\n   */\n  private _renderBranches(): React.ReactElement[] {\n    const curr = this.props.commit.commit;\n    const branches: Git.IBranch[] = [];\n    for (let i = 0; i < this.props.branches.length; i++) {\n      const branch = this.props.branches[i];\n      if (branch.top_commit && branch.top_commit === curr) {\n        branches.push(branch);\n      }\n    }\n    return branches.map(this._renderBranch, this);\n  }\n\n  /**\n   * Renders individual branch data.\n   *\n   * @param branch - branch data\n   * @returns React element\n   */\n  private _renderBranch(branch: Git.IBranch): React.ReactElement {\n    return (\n      <React.Fragment key={branch.name}>\n        {branch.is_current_branch && (\n          <span className={classes(branchClass, workingBranchClass)}>\n            working\n          </span>\n        )}\n        <span\n          className={classes(\n            branchClass,\n            branch.is_remote_branch ? remoteBranchClass : localBranchClass\n          )}\n        >\n          {branch.name}\n        </span>\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Callback invoked upon clicking on an individual commit.\n   *\n   * @param event - event object\n   */\n  private _onCommitClick = (): void => {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  };\n}\n"]}