{"version":3,"file":"gitPushPull.js","sourceRoot":"./@jupyterlab/git/src/","sources":["widgets/gitPushPull.ts"],"names":[],"mappings":"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","sourcesContent":["import { Spinner } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nimport { AUTH_ERROR_MESSAGES } from '../git';\nimport { Git, IGitExtension } from '../tokens';\n\nexport enum Operation {\n  Pull = 'Pull',\n  Push = 'Push'\n}\n\n/**\n * The UI for the content shown within the Git push/pull modal.\n */\nexport class GitPullPushDialog extends Widget {\n  private _spinner: Spinner;\n  private _model: IGitExtension;\n  private _body: HTMLElement;\n  private _operation: Operation;\n\n  /**\n   * Instantiates the dialog and makes the relevant service API call.\n   */\n  constructor(model: IGitExtension, operation: Operation, auth?: Git.IAuth) {\n    super();\n    this._model = model;\n    this._operation = operation;\n\n    this._body = this.createBody();\n    this.node.appendChild(this._body);\n\n    this._spinner = new Spinner();\n    this.node.appendChild(this._spinner.node);\n\n    this.executeGitApi(auth);\n  }\n\n  /**\n   * Executes the relevant service API depending on the _operation and handles response and errors.\n   * @param currentFileBrowserPath the path to the current repo\n   */\n  private executeGitApi(auth?: Git.IAuth) {\n    switch (this._operation) {\n      case Operation.Pull:\n        this._model\n          .pull(auth)\n          .then(response => {\n            this.handleResponse(response);\n          })\n          .catch(error => this.handleError(error.message));\n        break;\n      case Operation.Push:\n        this._model\n          .push(auth)\n          .then(response => {\n            this.handleResponse(response);\n          })\n          .catch(error => this.handleError(error.message));\n        break;\n      default:\n        throw new Error(`Invalid _operation type: ${this._operation}`);\n    }\n  }\n\n  /**\n   * Handles the response from the server by removing the _spinner and showing the appropriate\n   * success or error message.\n   * @param response the response from the server API call\n   */\n  private async handleResponse(response: Git.IPushPullResult) {\n    if (response.code !== 0) {\n      this.handleError(response.message);\n    } else {\n      this.handleSuccess();\n    }\n  }\n\n  private handleError(\n    message = 'Unexpected failure. Please check your Jupyter server logs for more details.'\n  ): void {\n    if (\n      AUTH_ERROR_MESSAGES.map(\n        errorMessage => message.indexOf(errorMessage) > -1\n      ).indexOf(true) > -1\n    ) {\n      this.parent!.parent!.close(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n\n    this.node.removeChild(this._spinner.node);\n    this._spinner.dispose();\n    const label = document.createElement('label');\n    const text = document.createElement('span');\n    text.textContent = `Git ${this._operation} failed with error:`;\n    const errorMessage = document.createElement('span');\n    errorMessage.textContent = message;\n    errorMessage.setAttribute(\n      'style',\n      'background-color:var(--jp-rendermime-error-background)'\n    );\n    label.appendChild(text);\n    label.appendChild(document.createElement('p'));\n    label.appendChild(errorMessage);\n    this._body.appendChild(label);\n  }\n\n  private handleSuccess(): void {\n    this.node.removeChild(this._spinner.node);\n    this._spinner.dispose();\n    const label = document.createElement('label');\n    const text = document.createElement('span');\n    text.textContent = `Git ${this._operation} completed successfully`;\n    label.appendChild(text);\n    this._body.appendChild(label);\n  }\n  private createBody(): HTMLElement {\n    const node = document.createElement('div');\n    node.className = 'jp-RedirectForm';\n    return node;\n  }\n}\n"]}