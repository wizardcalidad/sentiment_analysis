!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("d3-geo"),require("d3-geo-projection")):"function"==typeof define&&define.amd?define(["exports","d3-geo","d3-geo-projection"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).vega={},e.d3,e.d3)}(this,(function(e,t,o){"use strict";const r=t.geoPath(),n=["clipAngle","clipExtent","scale","translate","center","rotate","parallels","precision","reflectX","reflectY","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"];function a(e,o){return function r(){const a=o();return a.type=e,a.path=t.geoPath().projection(a),a.copy=a.copy||function(){const e=r();return n.forEach(t=>{a[t]&&e[t](a[t]())}),e.path.pointRadius(a.path.pointRadius()),e},a}}function i(e,t){if(!e||"string"!=typeof e)throw new Error("Projection type must be a name string.");return e=e.toLowerCase(),arguments.length>1?(c[e]=a(e,t),this):c[e]||null}const c={albers:t.geoAlbers,albersusa:t.geoAlbersUsa,azimuthalequalarea:t.geoAzimuthalEqualArea,azimuthalequidistant:t.geoAzimuthalEquidistant,conicconformal:t.geoConicConformal,conicequalarea:t.geoConicEqualArea,conicequidistant:t.geoConicEquidistant,equalEarth:t.geoEqualEarth,equirectangular:t.geoEquirectangular,gnomonic:t.geoGnomonic,identity:t.geoIdentity,mercator:t.geoMercator,mollweide:o.geoMollweide,naturalEarth1:t.geoNaturalEarth1,orthographic:t.geoOrthographic,stereographic:t.geoStereographic,transversemercator:t.geoTransverseMercator};for(const e in c)i(e,c[e]);e.getProjectionPath=function(e){return e&&e.path||r},e.projection=i,e.projectionProperties=n,Object.defineProperty(e,"__esModule",{value:!0})}));