!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("vega-dataflow"),require("vega-util"),require("d3-hierarchy")):"function"==typeof define&&define.amd?define(["exports","vega-dataflow","vega-util","d3-hierarchy"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).vega=e.vega||{},e.vega.transforms={}),e.vega,e.vega,e.d3)}(this,(function(e,t,a,r){"use strict";function n(e,t,a){var r={};return e.each(e=>{var n=e.data;a(n)&&(r[t(n)]=e)}),e.lookup=r,e}function i(e){t.Transform.call(this,null,e)}i.Definition={type:"Nest",metadata:{treesource:!0,changes:!0},params:[{name:"keys",type:"field",array:!0},{name:"generate",type:"boolean"}]};const s=e=>e.values;function o(){const e=[],t={entries:t=>function t(a,r){if(++r>e.length)return a;const n=[];for(const e in a)n.push({key:e,values:t(a[e],r)});return n}(function t(a,r){if(r>=e.length)return a;const n=a.length,i=e[r++],s={},o={};let d,u,l,p=-1;for(;++p<n;)d=i(u=a[p])+"",(l=s[d])?l.push(u):s[d]=[u];for(d in s)o[d]=t(s[d],r);return o}(t,0),0),key:a=>(e.push(a),t)};return t}function d(e){t.Transform.call(this,null,e)}a.inherits(i,t.Transform,{transform(e,i){i.source||a.error("Nest transform requires an upstream data source.");var d=e.generate,u=e.modified(),l=i.clone(),p=this.value;return(!p||u||i.changed())&&(p&&p.each(e=>{e.children&&t.isTuple(e.data)&&l.rem.push(e.data)}),this.value=p=r.hierarchy({values:a.array(e.keys).reduce((e,t)=>(e.key(t),e),o()).entries(l.source)},s),d&&p.each(e=>{e.children&&(e=t.ingest(e.data),l.add.push(e),l.source.push(e))}),n(p,t.tupleid,t.tupleid)),l.source.root=p,l}});const u=(e,t)=>e.parent===t.parent?1:2;a.inherits(d,t.Transform,{transform(e,r){r.source&&r.source.root||a.error(this.constructor.name+" transform requires a backing tree data source.");const n=this.layout(e.method),i=this.fields,s=r.source.root,o=e.as||i;e.field?s.sum(e.field):s.count(),e.sort&&s.sort(t.stableCompare(e.sort,e=>e.data)),function(e,t,a){for(let r,n=0,i=t.length;n<i;++n)r=t[n],r in a&&e[r](a[r])}(n,this.params,e),n.separation&&n.separation(!1!==e.separation?u:a.one);try{this.value=n(s)}catch(e){a.error(e)}return s.each(e=>function(e,t,a){const r=e.data,n=t.length-1;for(let i=0;i<n;++i)r[a[i]]=e[t[i]];r[a[n]]=e.children?e.children.length:0}(e,i,o)),r.reflow(e.modified()).modifies(o).modifies("leaf")}});const l=["x","y","r","depth","children"];function p(e){d.call(this,e)}p.Definition={type:"Pack",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"radius",type:"field",default:null},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:l.length,default:l}]},a.inherits(p,d,{layout:r.pack,params:["radius","size","padding"],fields:l});const m=["x0","y0","x1","y1","depth","children"];function f(e){d.call(this,e)}function c(e){t.Transform.call(this,null,e)}f.Definition={type:"Partition",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"padding",type:"number",default:0},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:m.length,default:m}]},a.inherits(f,d,{layout:r.partition,params:["size","round","padding"],fields:m}),c.Definition={type:"Stratify",metadata:{treesource:!0},params:[{name:"key",type:"field",required:!0},{name:"parentKey",type:"field",required:!0}]},a.inherits(c,t.Transform,{transform(e,t){t.source||a.error("Stratify transform requires an upstream data source.");let i=this.value;const s=e.modified(),o=t.fork(t.ALL).materialize(t.SOURCE),d=!i||s||t.changed(t.ADD_REM)||t.modified(e.key.fields)||t.modified(e.parentKey.fields);return o.source=o.source.slice(),d&&(i=o.source.length?n(r.stratify().id(e.key).parentId(e.parentKey)(o.source),e.key,a.truthy):n(r.stratify()([{}]),e.key,e.key)),o.source.root=this.value=i,o}});var y={tidy:r.tree,cluster:r.cluster};const h=["x","y","depth","children"];function g(e){d.call(this,e)}function v(e){t.Transform.call(this,[],e)}g.Definition={type:"Tree",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"tidy",values:["tidy","cluster"]},{name:"size",type:"number",array:!0,length:2},{name:"nodeSize",type:"number",array:!0,length:2},{name:"separation",type:"boolean",default:!0},{name:"as",type:"string",array:!0,length:h.length,default:h}]},a.inherits(g,d,{layout(e){var t=e||"tidy";if(a.hasOwnProperty(y,t))return y[t]();a.error("Unrecognized Tree layout method: "+t)},params:["size","nodeSize"],fields:h}),v.Definition={type:"TreeLinks",metadata:{tree:!0,generates:!0,changes:!0},params:[]},a.inherits(v,t.Transform,{transform(e,r){const n=this.value,i=r.source&&r.source.root,s=r.fork(r.NO_SOURCE),o={};return i||a.error("TreeLinks transform requires a tree data source."),r.changed(r.ADD_REM)?(s.rem=n,r.visit(r.SOURCE,e=>o[t.tupleid(e)]=1),i.each(e=>{const a=e.data,r=e.parent&&e.parent.data;r&&o[t.tupleid(a)]&&o[t.tupleid(r)]&&s.add.push(t.ingest({source:r,target:a}))}),this.value=s.add):r.changed(r.MOD)&&(r.visit(r.MOD,e=>o[t.tupleid(e)]=1),n.forEach(e=>{(o[t.tupleid(e.source)]||o[t.tupleid(e.target)])&&s.mod.push(e)})),s}});const b={binary:r.treemapBinary,dice:r.treemapDice,slice:r.treemapSlice,slicedice:r.treemapSliceDice,squarify:r.treemapSquarify,resquarify:r.treemapResquarify},k=["x0","y0","x1","y1","depth","children"];function T(e){d.call(this,e)}T.Definition={type:"Treemap",metadata:{tree:!0,modifies:!0},params:[{name:"field",type:"field"},{name:"sort",type:"compare"},{name:"method",type:"enum",default:"squarify",values:["squarify","resquarify","binary","dice","slice","slicedice"]},{name:"padding",type:"number",default:0},{name:"paddingInner",type:"number",default:0},{name:"paddingOuter",type:"number",default:0},{name:"paddingTop",type:"number",default:0},{name:"paddingRight",type:"number",default:0},{name:"paddingBottom",type:"number",default:0},{name:"paddingLeft",type:"number",default:0},{name:"ratio",type:"number",default:1.618033988749895},{name:"round",type:"boolean",default:!1},{name:"size",type:"number",array:!0,length:2},{name:"as",type:"string",array:!0,length:k.length,default:k}]},a.inherits(T,d,{layout(){const e=r.treemap();return e.ratio=t=>{const a=e.tile();a.ratio&&e.tile(a.ratio(t))},e.method=t=>{a.hasOwnProperty(b,t)?e.tile(b[t]):a.error("Unrecognized Treemap layout method: "+t)},e},params:["method","ratio","size","round","padding","paddingInner","paddingOuter","paddingTop","paddingRight","paddingBottom","paddingLeft"],fields:k}),e.nest=i,e.pack=p,e.partition=f,e.stratify=c,e.tree=g,e.treelinks=v,e.treemap=T,Object.defineProperty(e,"__esModule",{value:!0})}));